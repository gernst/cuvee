data nat = zero | succ(n: nat);
data list = nil | cons(head: nat, tail: list);
data tree = leaf | node(value: nat, left: tree, right: tree);
function add(x₀: nat, x₁: nat): nat;
function length(x₀: list): nat;
function map(x₀: [nat]nat, x₁: list): list;
function append(x₀: list, x₁: list): list;
function contains(x₀: nat, x₁: list): Bool;
function size(x₀: tree): nat;
function elems(x₀: tree): list;
function mirror(x₀: tree): tree;
function maptree(x₀: [nat]nat, x₁: tree): tree;
function containstree(x₀: nat, x₁: tree): Bool;
function insert(x₀: nat, x₁: tree): tree;
axiom forall n: nat :: (add(zero, n) == n);
axiom forall m: nat, n: nat :: (add(succ(m), n) == succ(add(m, n)));
axiom (length(nil) == zero);
axiom forall x: nat, xs: list :: (length(cons(x, xs)) == succ(length(xs)));
axiom forall f: [nat]nat :: (map(f, nil) == nil);
axiom forall f: [nat]nat, y: nat, ys: list :: (map(f, cons(y, ys)) == cons(f[y], map(f, ys)));
axiom forall ys: list :: (append(nil, ys) == ys);
axiom forall x: nat, xs: list, ys: list :: (append(cons(x, xs), ys) == cons(x, append(xs, ys)));
axiom forall x: nat :: (contains(x, nil) <==> false);
axiom forall x: nat, y: nat, ys: list :: (contains(x, cons(y, ys)) <==> ((x == y) || contains(x, ys)));
axiom (size(leaf) == zero);
axiom forall v: nat, l: tree, r: tree :: (size(node(v, l, r)) == succ(add(size(l), size(r))));
axiom (mirror(leaf) == leaf);
axiom forall v: nat, l: tree, r: tree :: (mirror(node(v, l, r)) == node(v, r, l));
axiom forall f: [nat]nat :: (maptree(f, leaf) == leaf);
axiom forall f: [nat]nat, v: nat, l: tree, r: tree :: (maptree(f, node(v, l, r)) == node(f[v], maptree(f, l), maptree(f, r)));
axiom (elems(leaf) == nil);
axiom forall v: nat, l: tree, r: tree :: (elems(node(v, l, r)) == cons(v, append(elems(l), elems(r))));
axiom forall x: nat :: (containstree(x, leaf) <==> false);
axiom forall x: nat, v: nat, l: tree, r: tree :: (containstree(x, node(v, l, r)) <==> ((x == v) || containstree(x, l) || containstree(x, r)));
axiom forall x: nat :: (insert(x, leaf) == node(x, leaf, leaf));
axiom forall x: nat, v: nat, l: tree, r: tree :: (insert(x, node(v, l, r)) == node(v, insert(x, l), r));
lemma forall y₀: tree :: (length(elems(y₀)) == size(y₀));
lemma forall x₀: [nat]nat, y₀: tree :: (map(x₀, elems(y₀)) == elems(maptree(x₀, y₀)));
lemma forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)));
lemma forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(y₀, append(y₁, x₁)));
lemma forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)));
lemma forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)));
lemma forall y₀: tree :: (mirror(mirror(y₀)) == y₀);
lemma forall y₀: [nat]nat, y₁: tree :: (mirror(maptree(y₀, y₁)) == maptree(y₀, mirror(y₁)));
lemma forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁));
lemma forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == size(y₁));
lemma forall x: nat :: (add(x, zero) == x);
lemma forall x: list :: (append(x, nil) == x);
