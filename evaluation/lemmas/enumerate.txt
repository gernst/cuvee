evaluation/lemmas/list/append.enumerate.bpl
  18  number of lemmas
  0  wrong
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  18  nontrivial
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  17  reduced greedily
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  5  independent
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  10  evaluation/lemmas/list/append.structural.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  10  evaluation/lemmas/list/append.conditional.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: nat, y₁: nat :: (snoc(x₀, add(y₀, y₁)) == snoc(append(x₀, nil), add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  5  evaluation/lemmas/list/append.th.log
evaluation/lemmas/list/filter.enumerate.bpl
  5  number of lemmas
  0  wrong
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  5  nontrivial
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  5  reduced greedily
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  4  independent
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  4  evaluation/lemmas/list/filter.structural.bpl
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  4  evaluation/lemmas/list/filter.conditional.bpl
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (ex(x₀, filter(y₀, y₁)) <==> ex(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (filter(x₀, filter(y₀, y₁)) == filter(y₀, filter(x₀, y₁)))
forall x₀: [nat]Bool, y₀: [nat]Bool, y₁: list :: (countif(x₀, filter(y₀, y₁)) == countif(y₀, filter(x₀, y₁)))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, y₁))
forall y₀: [nat]Bool, y₁: list :: (length(filter(y₀, y₁)) == countif(y₀, filter(y₀, y₁)))
  3  evaluation/lemmas/list/filter.th.log
evaluation/lemmas/list/length.enumerate.bpl
  14  number of lemmas
  0  wrong
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  14  nontrivial
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  reduced greedily
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  4  independent
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  evaluation/lemmas/list/length.structural.bpl
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  evaluation/lemmas/list/length.conditional.bpl
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  10  evaluation/lemmas/list/length.th.log
evaluation/lemmas/list/map.enumerate.bpl
  17  number of lemmas
  0  wrong
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  9  nontrivial
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  17  reduced greedily
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  10  independent
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  3  evaluation/lemmas/list/map.structural.bpl
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  6  evaluation/lemmas/list/map.conditional.bpl
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(drop(zero, y₀), append(y₁, x₁)))
forall x₀: nat, y₀: nat, y₁: list :: (take(x₀, take(y₀, y₁)) == take(y₀, take(x₀, y₁)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(append(y₀, y₁), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list, x₁: list :: (append(map(y₀, y₁), x₁) == append(map(y₀, y₁), drop(zero, x₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, drop(y₀, y₁)) == append(drop(zero, x₀), drop(y₀, y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), drop(zero, x₁)))
forall y₀: nat, x₁: nat :: (leq(succ(y₀), x₁) <==> lt(y₀, x₁))
forall y₀: list, x₁: list :: (drop(length(y₀), x₁) == drop(length(y₀), drop(zero, x₁)))
forall y₀: list, x₁: list :: (take(length(y₀), x₁) == take(length(y₀), drop(zero, x₁)))
forall y₀: list, y₁: list :: (append(y₀, y₁) == append(y₀, drop(zero, y₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: nat, x₁: list :: (take(succ(y₀), x₁) == take(succ(y₀), drop(zero, x₁)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(drop(zero, y₁)))
  1  evaluation/lemmas/list/map.th.log
evaluation/lemmas/list/remove.enumerate.bpl
  14  number of lemmas
  0  wrong
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  14  nontrivial
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  13  reduced greedily
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  2  independent
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  12  evaluation/lemmas/list/remove.structural.bpl
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  12  evaluation/lemmas/list/remove.conditional.bpl
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
  3  evaluation/lemmas/list/remove.th.log
evaluation/lemmas/list/reverse.enumerate.bpl
  24  number of lemmas
  0  wrong
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  24  nontrivial
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  8  reduced greedily
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  0  independent
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  0  evaluation/lemmas/list/reverse.structural.bpl
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  0  evaluation/lemmas/list/reverse.conditional.bpl
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list :: (reverse(y₀) == nreverse(y₀, nil))
forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)))
forall x₀: list, y₀: list :: (qreverse(x₀, reverse(y₀)) == append(qreverse(x₀, nil), qreverse(y₀, nil)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == qreverse(y₁, cons(y₀, nil)))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == nreverse(y₀, cons(x₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, append(y₀, y₁)) == qreverse(qreverse(y₀, x₀), y₁))
forall y₀: list, y₁: list :: (reverse(nreverse(y₀, y₁)) == qreverse(reverse(y₀), reverse(y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(append(y₀, nil), x₁))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == qreverse(reverse(x₀), qreverse(y₀, nil)))
forall x₀: list, y₀: list :: (nreverse(x₀, reverse(y₀)) == qreverse(append(y₀, nil), nreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(append(y₀, y₁), x₁) == qreverse(y₁, qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, nreverse(y₀, y₁)) == nreverse(nreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == qreverse(qreverse(y₁, nil), qreverse(y₀, x₁)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, append(y₀, y₁)) == append(append(y₀, y₁), nreverse(x₀, nil)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == qreverse(nreverse(x₀, nil), cons(y₀, y₁)))
forall x₀: nat, y₀: list, y₁: list :: (cons(x₀, append(y₀, y₁)) == nreverse(qreverse(y₁, nil), cons(x₀, y₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == nreverse(append(y₀, nil), nreverse(y₁, nil)))
forall y₀: list, y₁: list, x₁: list :: (qreverse(nreverse(y₀, y₁), x₁) == append(y₀, qreverse(y₁, x₁)))
forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == qreverse(nreverse(x₁, y₁), nreverse(y₀, nil)))
forall x₀: list, y₀: list, y₁: list :: (nreverse(x₀, qreverse(y₀, y₁)) == append(reverse(y₀), nreverse(x₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (qreverse(x₀, qreverse(y₀, y₁)) == nreverse(qreverse(y₁, y₀), qreverse(x₀, nil)))
forall y₀: list, y₁: list, x₁: list :: (append(nreverse(y₀, y₁), x₁) == nreverse(qreverse(x₁, y₀), y₁))
  0  evaluation/lemmas/list/reverse.th.log
evaluation/lemmas/list/rotate.enumerate.bpl
  20  number of lemmas
  0  wrong
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  17  nontrivial
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  17  reduced greedily
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  7  independent
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  11  evaluation/lemmas/list/rotate.structural.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  12  evaluation/lemmas/list/rotate.conditional.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, rotate(y₀, y₁)) == append(append(x₀, nil), rotate(y₀, y₁)))
forall x₀: list, y₀: nat, y₁: list :: (append(x₀, cons(y₀, y₁)) == append(rotate(zero, x₀), cons(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat :: (y₀ == add(y₀, zero))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), rotate(zero, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(rotate(y₀, y₁), x₁) == append(rotate(y₀, y₁), append(x₁, nil)))
forall y₁: list, x₁: list :: (append(y₁, x₁) == append(y₁, rotate(zero, x₁)))
forall y₀: list :: (length(reverse(y₀)) == length(y₀))
forall x₁: list :: (x₁ == append(x₁, nil))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(rotate(zero, x₀), reverse(y₀)))
forall y₀: nat, y₁: list :: (append(reverse(y₁), cons(y₀, nil)) == rotate(length(y₁), cons(y₀, y₁)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == rotate(length(y₀), append(y₀, x₀)))
forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == append(reverse(y₁), reverse(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, rotate(zero, y₀)))
  3  evaluation/lemmas/list/rotate.th.log
evaluation/lemmas/list/runlength.enumerate.bpl
  14  number of lemmas
  0  wrong
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  14  nontrivial
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  14  reduced greedily
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  6  independent
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  11  evaluation/lemmas/list/runlength.structural.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  11  evaluation/lemmas/list/runlength.conditional.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  12  evaluation/lemmas/list/runlength.th.log
evaluation/lemmas/nat.enumerate.bpl
  159  number of lemmas
  0  wrong
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  153  nontrivial
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  54  reduced greedily
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  45  independent
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  95  evaluation/lemmas/nat.structural.bpl
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  95  evaluation/lemmas/nat.conditional.bpl
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(add(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(min(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(max(y₀, y₀), succ(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(succ(y₀), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, zero), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(x₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(x₁, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(y₀, y₁), max(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(max(x₁, x₁), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(x₁, x₁), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(x₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), min(x₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(max(y₀, y₁), x₁) == add(min(x₁, x₁), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat :: (min(x₀, succ(y₀)) == min(max(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(add(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, sub(y₀, y₁)) == max(max(x₀, x₀), sub(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(mul(y₀, y₁), x₁) == min(mul(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat :: (max(x₀, succ(y₀)) == max(add(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(add(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(min(x₀, x₀), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, min(y₀, y₁)) == mul(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(min(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, min(y₀, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(add(y₀, y₁), x₁) == max(add(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(max(y₀, y₁), x₁) == min(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(add(x₁, y₀), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(max(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(min(y₀, y₁), x₁) == max(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, max(y₀, y₁)) == sub(max(x₀, x₀), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == sub(max(x₀, zero), succ(y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, min(y₀, y₁)) == min(add(x₀, y₀), add(x₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(sub(y₀, y₁), x₁) == min(sub(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, max(y₀, y₁)) == min(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, max(y₀, y₁)) == max(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(max(y₀, y₁), x₁) == max(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(min(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(mul(y₀, y₁), x₁) == mul(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (max(mul(y₀, y₁), x₁) == max(mul(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, y₁), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(min(x₀, x₀), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(mul(y₀, y₁)) == add(mul(y₀, y₁), succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, max(y₀, y₁)) == mul(max(x₀, zero), max(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), min(y₁, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(mul(y₀, y₁), x₁) == sub(mul(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₁, y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(max(y₀, y₁), x₁) == mul(max(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₀, zero), add(y₁, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), max(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(max(y₀, y₁), x₁) == sub(max(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, min(y₀, y₁)) == max(max(x₀, zero), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, mul(y₀, y₁)) == min(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(min(y₀, y₁), x₁) == sub(min(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, sub(y₀, y₁)) == mul(max(x₀, zero), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(min(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₀, y₀), add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, mul(y₀, y₁)) == max(max(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₁, y₀), min(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, zero), mul(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, y₀), min(y₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(mul(y₀, y₁), x₁) == add(mul(y₀, y₁), min(x₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), add(y₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, min(y₀, y₁)) == min(max(x₀, zero), min(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(add(y₀, y₁), x₁) == min(add(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(min(y₀, y₁), x₁) == mul(min(y₀, y₁), max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), max(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(x₀, x₀), add(y₀, y₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(min(y₀, y₀), succ(y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(min(x₁, x₁), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(x₀, mul(x₀, y₀)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, mul(y₀, y₁)) == mul(max(x₀, x₀), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(sub(y₀, y₁), x₁) == mul(sub(y₀, y₁), max(x₁, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, sub(y₀, y₁)) == min(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(min(y₀, y₀), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (min(x₀, add(y₀, y₁)) == min(max(x₀, zero), add(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), add(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(max(y₀, zero), add(x₁, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, mul(y₀, y₁)) == add(add(x₀, zero), mul(y₀, y₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₁, add(y₀, x₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), max(x₀, zero)))
forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, max(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(min(y₀, y₁), x₁) == add(min(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, add(y₀, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, max(y₀, y₁)) == add(max(x₀, zero), max(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, min(y₀, y₁)) == sub(max(x₀, x₀), min(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, mul(y₀, y₁)) == sub(max(x₀, x₀), mul(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(x₀, min(y₀, y₀))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, x₁), mul(y₀, max(x₁, x₁))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(max(x₁, zero), mul(y₀, max(x₁, zero))))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(add(x₁, zero), mul(y₀, add(x₁, zero))))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == succ(add(y₀, max(x₀, zero))))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₁, y₀), add(x₁, zero)))
forall y₀: nat, x₁: nat :: (max(succ(y₀), x₁) == max(succ(y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (max(x₀, add(y₀, y₁)) == max(add(x₀, zero), add(y₁, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(min(y₁, y₁), add(x₀, y₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), max(x₀, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (min(min(y₀, y₁), x₁) == min(min(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(max(x₀, x₀), sub(y₀, y₁)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(max(y₀, zero), succ(x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(max(y₁, zero), add(y₀, x₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (mul(add(y₀, y₁), x₁) == mul(add(y₀, y₁), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₁, y₀), max(x₀, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == mul(add(x₀, zero), add(y₀, y₁)))
forall y₀: nat, x₁: nat :: (add(x₁, mul(y₀, x₁)) == add(min(x₁, x₁), mul(y₀, min(x₁, x₁))))
  48  evaluation/lemmas/nat.th.log
evaluation/lemmas/list.enumerate.bpl
  31  number of lemmas
  0  wrong
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  28  nontrivial
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  27  reduced greedily
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  16  independent
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  17  evaluation/lemmas/list.structural.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  19  evaluation/lemmas/list.conditional.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: list, y₁: nat, x₁: list :: (append(snoc(y₀, y₁), x₁) == append(append(y₀, nil), cons(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall x₀: [nat]Bool, y₀: nat, y₁: list :: (filter(x₀, remove(y₀, y₁)) == remove(add(y₀, zero), filter(x₀, y₁)))
forall y₀: list, y₁: list, x₁: nat :: (snoc(append(y₀, y₁), x₁) == append(append(y₀, nil), snoc(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: [nat]Bool, y₁: list :: (add(x₀, countif(y₀, y₁)) == add(countif(y₀, y₁), add(x₀, zero)))
forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(y₀, y₁), x₀))
forall y₀: list, y₁: nat :: (length(snoc(y₀, y₁)) == add(length(y₀), succ(zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall x₀: nat, y₀: list :: (cons(x₀, reverse(y₀)) == reverse(snoc(y₀, x₀)))
forall y₀: list :: (reverse(reverse(y₀)) == take(length(y₀), snoc(y₀, zero)))
forall x₀: list, y₀: list :: (append(x₀, reverse(y₀)) == append(drop(zero, x₀), reverse(y₀)))
forall y₀: list, x₁: list :: (count(length(y₀), x₁) == count(length(y₀), rotate(zero, x₁)))
forall y₀: nat, y₁: list, x₁: list :: (append(take(y₀, y₁), x₁) == append(take(y₀, y₁), rotate(zero, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(add(y₀, y₁), x₀))
forall y₀: list :: (reverse(reverse(y₀)) == rotate(zero, y₀))
forall y₀: list :: (length(reverse(y₀)) == length(append(y₀, nil)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(reverse(y₁)))
forall x₀: list, y₀: list, y₁: nat :: (append(x₀, snoc(y₀, y₁)) == snoc(append(x₀, y₀), add(y₁, zero)))
forall y₀: list :: (reverse(reverse(y₀)) == append(take(zero, y₀), rotate(zero, y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == drop(zero, drop(zero, y₀)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: list :: (reverse(reverse(y₀)) == append(rotate(zero, y₀), take(zero, y₀)))
  26  evaluation/lemmas/list.th.log
Compiling cuvee (1 Scala source)
[0m[33m[W][0m [0m[34m [E-1] [0m2 deprecations (since 2.13.0); re-run with -deprecation for details
Compiled cuvee (1090ms)
evaluation/lemmas/tree.enumerate.bpl
  26  number of lemmas
  0  wrong
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == add(size(y₁), zero))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: tree :: (size(insert(y₀, y₁)) == size(insert(zero, y₁)))
forall y₀: [nat]nat, y₁: tree :: (elems(maptree(y₀, y₁)) == map(y₀, elems(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == length(elems(y₁)))
forall y₀: tree :: (succ(size(y₀)) == size(insert(zero, y₀)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, x₀), succ(zero)))
forall y₀: tree :: (length(elems(y₀)) == size(y₀))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall y₀: tree :: (mirror(mirror(y₀)) == y₀)
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₁), length(y₀)))
  25  nontrivial
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == add(size(y₁), zero))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: tree :: (size(insert(y₀, y₁)) == size(insert(zero, y₁)))
forall y₀: [nat]nat, y₁: tree :: (elems(maptree(y₀, y₁)) == map(y₀, elems(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == length(elems(y₁)))
forall y₀: tree :: (succ(size(y₀)) == size(insert(zero, y₀)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, x₀), succ(zero)))
forall y₀: tree :: (length(elems(y₀)) == size(y₀))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall y₀: tree :: (mirror(mirror(y₀)) == y₀)
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₁), length(y₀)))
  21  reduced greedily
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == add(size(y₁), zero))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: tree :: (size(insert(y₀, y₁)) == size(insert(zero, y₁)))
forall y₀: [nat]nat, y₁: tree :: (elems(maptree(y₀, y₁)) == map(y₀, elems(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == length(elems(y₁)))
forall y₀: tree :: (succ(size(y₀)) == size(insert(zero, y₀)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, x₀), succ(zero)))
forall y₀: tree :: (length(elems(y₀)) == size(y₀))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall y₀: tree :: (mirror(mirror(y₀)) == y₀)
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₁), length(y₀)))
  14  evaluation/lemmas/tree.structural.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == add(size(y₁), zero))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: tree :: (size(insert(y₀, y₁)) == size(insert(zero, y₁)))
forall y₀: [nat]nat, y₁: tree :: (elems(maptree(y₀, y₁)) == map(y₀, elems(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == length(elems(y₁)))
forall y₀: tree :: (succ(size(y₀)) == size(insert(zero, y₀)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, x₀), succ(zero)))
forall y₀: tree :: (length(elems(y₀)) == size(y₀))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall y₀: tree :: (mirror(mirror(y₀)) == y₀)
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₁), length(y₀)))
  14  evaluation/lemmas/tree.conditional.bpl
forall y₀: nat :: (y₀ == add(y₀, zero))
forall x₁: list :: (x₁ == append(x₁, nil))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), append(y₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall x₀: [nat]nat, y₀: list, y₁: list :: (map(x₀, append(y₀, y₁)) == append(map(x₀, y₀), map(x₀, y₁)))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == add(size(y₁), zero))
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₀), length(y₁)))
forall y₀: nat, y₁: tree :: (size(insert(y₀, y₁)) == size(insert(zero, y₁)))
forall y₀: [nat]nat, y₁: tree :: (elems(maptree(y₀, y₁)) == map(y₀, elems(y₁)))
forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(x₁, succ(y₀)))
forall y₀: [nat]nat, y₁: list :: (length(map(y₀, y₁)) == length(y₁))
forall y₀: [nat]nat, y₁: tree :: (size(maptree(y₀, y₁)) == length(elems(y₁)))
forall y₀: tree :: (succ(size(y₀)) == size(insert(zero, y₀)))
forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, x₀), succ(zero)))
forall y₀: tree :: (length(elems(y₀)) == size(y₀))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₀, zero)))
forall y₀: nat :: (succ(y₀) == add(y₀, succ(zero)))
forall y₀: tree :: (mirror(mirror(y₀)) == y₀)
forall y₀: list, y₁: list :: (length(append(y₀, y₁)) == add(length(y₁), length(y₀)))
  23  evaluation/lemmas/tree.th.log
