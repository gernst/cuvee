(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun not_ (Bool) Bool)
(=> rule1 (not_ false) true)
(=> rule2 (not_ true) false)
(declare-fun add (nat nat) nat)
(=> rule3 (add zero ?n) ?n)
(=> rule4 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule5 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun length (list) nat)
(=> rule6 (length nil) zero)
(=> rule7 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun append (list list) list)
(=> rule8 (append nil ?ys) ?ys)
(=> rule9 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule10 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun map ((-> nat nat) list) list)
(=> rule11 (map ?f nil) nil)
(=> rule12 (map ?f (cons ?y ?ys)) (cons (select ?f ?y) (map ?f ?ys)))
(=> rule13 (cons (select ?f ?y) (map ?f ?ys)) (map ?f (cons ?y ?ys)))
(declare-fun all ((-> nat Bool) list) Bool)
(=> rule14 (all ?p nil) true)
(=> rule15 (all ?p (cons ?y ?ys)) (and (select ?p ?y) (all ?p ?ys)))
(=> rule16 (and (select ?p ?y) (all ?p ?ys)) (all ?p (cons ?y ?ys)))
(declare-fun ex ((-> nat Bool) list) Bool)
(=> rule17 (ex ?p nil) false)
(=> rule18 (ex ?p (cons ?y ?ys)) (or (select ?p ?y) (ex ?p ?ys)))
(=> rule19 (or (select ?p ?y) (ex ?p ?ys)) (ex ?p (cons ?y ?ys)))
(declare-fun contains (nat list) Bool)
(=> rule20 (contains ?x nil) false)
(=> rule21 (contains ?x (cons ?y ?ys)) (or (= ?x ?y) (contains ?x ?ys)))
(=> rule22 (or (= ?x ?y) (contains ?x ?ys)) (contains ?x (cons ?y ?ys)))
(declare-fun count (nat list) nat)
(=> rule23 (count ?x nil) zero)
(=> rule24 (count ?x (cons ?y ?ys)) (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)))
(=> rule25 (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)) (count ?x (cons ?y ?ys)))
(declare-fun countif ((-> nat Bool) list) nat)
(=> rule26 (countif ?p nil) zero)
(=> rule27 (countif ?p (cons ?y ?ys)) (ite (select ?p ?y) (succ (countif ?p ?ys)) (countif ?p ?ys)))
(=> rule28 (ite (select ?p ?y) (succ (countif ?p ?ys)) (countif ?p ?ys)) (countif ?p (cons ?y ?ys)))
(declare-fun snoc (list nat) list)
(=> rule29 (snoc nil ?z) (cons ?z nil))
(=> rule30 (cons ?z nil) (snoc nil ?z))
(=> rule31 (snoc (cons ?y ?ys) ?z) (cons ?y (snoc ?ys ?z)))
(=> rule32 (cons ?y (snoc ?ys ?z)) (snoc (cons ?y ?ys) ?z))
(declare-fun rotate (nat list) list)
(=> rule33 (rotate ?n nil) nil)
(=> rule34 (rotate zero (cons ?y ?ys)) (cons ?y ?ys))
(=> rule35 (cons ?y ?ys) (rotate zero (cons ?y ?ys)))
(=> rule36 (rotate (succ ?n) (cons ?y ?ys)) (snoc (rotate ?n ?ys) ?y))
(=> rule37 (snoc (rotate ?n ?ys) ?y) (rotate (succ ?n) (cons ?y ?ys)))
(declare-fun take (nat list) list)
(=> rule38 (take ?n nil) nil)
(=> rule39 (take zero (cons ?y ?ys)) nil)
(=> rule40 (take (succ ?n) (cons ?y ?ys)) (cons ?y (take ?n ?ys)))
(=> rule41 (cons ?y (take ?n ?ys)) (take (succ ?n) (cons ?y ?ys)))
(declare-fun drop (nat list) list)
(=> rule42 (drop ?n nil) nil)
(=> rule43 (drop zero (cons ?y ?ys)) (cons ?y ?ys))
(=> rule44 (cons ?y ?ys) (drop zero (cons ?y ?ys)))
(=> rule45 (drop (succ ?n) (cons ?y ?ys)) (drop ?n ?ys))
(declare-fun reverse (list) list)
(=> rule46 (reverse nil) nil)
(=> rule47 (reverse (cons ?y ?ys)) (snoc (reverse ?ys) ?y))
(=> rule48 (snoc (reverse ?ys) ?y) (reverse (cons ?y ?ys)))
(declare-fun remove (nat list) list)
(=> rule49 (remove ?x nil) nil)
(=> rule50 (remove ?x (cons ?y ?ys)) (ite (= ?x ?y) (remove ?x ?ys) (cons ?y (remove ?x ?ys))))
(=> rule51 (ite (= ?x ?y) (remove ?x ?ys) (cons ?y (remove ?x ?ys))) (remove ?x (cons ?y ?ys)))
(declare-fun filter ((-> nat Bool) list) list)
(=> rule52 (filter ?p nil) nil)
(=> rule53 (filter ?p (cons ?y ?ys)) (ite (select ?p ?y) (cons ?y (filter ?p ?ys)) (filter ?p ?ys)))
(=> rule54 (ite (select ?p ?y) (cons ?y (filter ?p ?ys)) (filter ?p ?ys)) (filter ?p (cons ?y ?ys)))
