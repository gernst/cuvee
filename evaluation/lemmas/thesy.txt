evaluation/lemmas/list/append.th.log
  17  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  17  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  evaluation/lemmas/list/append.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  evaluation/lemmas/list/append.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  0  evaluation/lemmas/list/append.enumerate.bpl
evaluation/lemmas/list/filter.th.log
  9  number of lemmas
  0  wrong
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (all(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> true)
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) <==> ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
  9  nontrivial
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (all(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> true)
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) <==> ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
  5  reduced greedily
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (all(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> true)
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) <==> ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
  7  evaluation/lemmas/list/filter.structural.bpl
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (all(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> true)
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) <==> ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
  7  evaluation/lemmas/list/filter.conditional.bpl
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (length(filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (all(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> true)
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (countif(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == countif(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) <==> ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (ex(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) <==> ex(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0) == filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_BoolPC_1: [nat]Bool, ?ts_ph_list_0: list :: (filter(?ts_ph_POfn_nat_BoolPC_1, filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0)) == filter(?ts_ph_POfn_nat_BoolPC_1, ?ts_ph_list_0))
  5  evaluation/lemmas/list/filter.enumerate.bpl
evaluation/lemmas/list/length.th.log
  22  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == nlength(?ts_ph_list_0, zero))
forall ?ts_ph_list_0: list :: (nlength(?ts_ph_list_0, zero) == length(?ts_ph_list_0))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == nlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qlength(?ts_ph_list_1, length(?ts_ph_list_0)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
  22  nontrivial
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == nlength(?ts_ph_list_0, zero))
forall ?ts_ph_list_0: list :: (nlength(?ts_ph_list_0, zero) == length(?ts_ph_list_0))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == nlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qlength(?ts_ph_list_1, length(?ts_ph_list_0)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
  5  reduced greedily
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == nlength(?ts_ph_list_0, zero))
forall ?ts_ph_list_0: list :: (nlength(?ts_ph_list_0, zero) == length(?ts_ph_list_0))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == nlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qlength(?ts_ph_list_1, length(?ts_ph_list_0)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
  20  evaluation/lemmas/list/length.structural.bpl
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == nlength(?ts_ph_list_0, zero))
forall ?ts_ph_list_0: list :: (nlength(?ts_ph_list_0, zero) == length(?ts_ph_list_0))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == nlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qlength(?ts_ph_list_1, length(?ts_ph_list_0)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
  20  evaluation/lemmas/list/length.conditional.bpl
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == nlength(?ts_ph_list_0, zero))
forall ?ts_ph_list_0: list :: (nlength(?ts_ph_list_0, zero) == length(?ts_ph_list_0))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nlength(?ts_ph_list_0, succ(?ts_ph_nat_1)) == qlength(?ts_ph_list_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == nlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (succ(nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (cons(qlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == cons(nlength(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_1, nlength(?ts_ph_list_0, ?ts_ph_nat_0)) == nlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_0: nat :: (nlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)) == qlength(?ts_ph_list_0, nlength(?ts_ph_list_1, ?ts_ph_nat_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qlength(?ts_ph_list_0, length(?ts_ph_list_1)) == qlength(?ts_ph_list_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qlength(?ts_ph_list_1, length(?ts_ph_list_0)) == qlength(?ts_ph_list_0, length(?ts_ph_list_1)))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)) == qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (qlength(?ts_ph_list_0, qlength(?ts_ph_list_1, ?ts_ph_nat_1)) == qlength(?ts_ph_list_1, qlength(?ts_ph_list_0, ?ts_ph_nat_1)))
  0  evaluation/lemmas/list/length.enumerate.bpl
evaluation/lemmas/list/map.th.log
  45  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  36  nontrivial
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  21  reduced greedily
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  26  evaluation/lemmas/list/map.structural.bpl
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  28  evaluation/lemmas/list/map.conditional.bpl
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  27  evaluation/lemmas/list/map.enumerate.bpl
evaluation/lemmas/list/remove.th.log
  26  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  21  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  13  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.enumerate.bpl
evaluation/lemmas/list/reverse.th.log
  24  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  24  nontrivial
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  13  reduced greedily
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.structural.bpl
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.conditional.bpl
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.enumerate.bpl
evaluation/lemmas/list/rotate.th.log
  32  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  24  nontrivial
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  19  reduced greedily
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  18  evaluation/lemmas/list/rotate.structural.bpl
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  18  evaluation/lemmas/list/rotate.conditional.bpl
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  7  evaluation/lemmas/list/rotate.enumerate.bpl
evaluation/lemmas/list/runlength.th.log
  10  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  nontrivial
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  reduced greedily
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  evaluation/lemmas/list/runlength.structural.bpl
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  evaluation/lemmas/list/runlength.conditional.bpl
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  5  evaluation/lemmas/list/runlength.enumerate.bpl
evaluation/lemmas/nat.th.log
  59  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  49  nontrivial
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  36  reduced greedily
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  47  evaluation/lemmas/nat.structural.bpl
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  37  evaluation/lemmas/nat.conditional.bpl
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  51  evaluation/lemmas/nat.enumerate.bpl
evaluation/lemmas/list.th.log
  6  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
  3  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
  2  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
  1  evaluation/lemmas/list.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
  0  evaluation/lemmas/list.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
  3  evaluation/lemmas/list.enumerate.bpl
evaluation/lemmas/tree.th.log
  2  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
  2  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
  2  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
  2  independent
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
  0  evaluation/lemmas/tree.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
  0  evaluation/lemmas/tree.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
