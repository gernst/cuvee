Compiling cuvee (1 Scala source)
[0m[33m[W][0m [0m[34m [E-1] [0m2 deprecations (since 2.13.0); re-run with -deprecation for details
Compiled cuvee (1090ms)
evaluation/lemmas/tree.enumerate.bpl
  26  number of lemmas
  0  wrong
forall y‚ÇÄ: nat :: (y‚ÇÄ == add(y‚ÇÄ, zero))
forall x‚ÇÅ: list :: (x‚ÇÅ == append(x‚ÇÅ, nil))
forall y‚ÇÄ: nat, y‚ÇÅ: nat :: (succ(add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, succ(y‚ÇÅ)))
forall y‚ÇÄ: list, x‚ÇÅ: nat :: (add(length(y‚ÇÄ), x‚ÇÅ) == add(add(x‚ÇÅ, zero), length(y‚ÇÄ)))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÅ, y‚ÇÄ), add(x‚ÇÅ, zero)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), append(y‚ÇÅ, nil)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, add(y‚ÇÅ, x‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÅ, add(y‚ÇÄ, x‚ÇÄ)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÄ, x‚ÇÅ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(x‚ÇÅ, add(y‚ÇÅ, y‚ÇÄ)))
forall x‚ÇÄ: [nat]nat, y‚ÇÄ: list, y‚ÇÅ: list :: (map(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(map(x‚ÇÄ, y‚ÇÄ), map(x‚ÇÄ, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == add(size(y‚ÇÅ), zero))
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÄ), length(y‚ÇÅ)))
forall y‚ÇÄ: nat, y‚ÇÅ: tree :: (size(insert(y‚ÇÄ, y‚ÇÅ)) == size(insert(zero, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (elems(maptree(y‚ÇÄ, y‚ÇÅ)) == map(y‚ÇÄ, elems(y‚ÇÅ)))
forall y‚ÇÄ: nat, x‚ÇÅ: nat :: (succ(add(y‚ÇÄ, x‚ÇÅ)) == add(x‚ÇÅ, succ(y‚ÇÄ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: list :: (length(map(y‚ÇÄ, y‚ÇÅ)) == length(y‚ÇÅ))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == length(elems(y‚ÇÅ)))
forall y‚ÇÄ: tree :: (succ(size(y‚ÇÄ)) == size(insert(zero, y‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat :: (add(x‚ÇÄ, succ(y‚ÇÄ)) == add(add(y‚ÇÄ, x‚ÇÄ), succ(zero)))
forall y‚ÇÄ: tree :: (length(elems(y‚ÇÄ)) == size(y‚ÇÄ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(x‚ÇÅ, y‚ÇÅ), add(y‚ÇÄ, zero)))
forall y‚ÇÄ: nat :: (succ(y‚ÇÄ) == add(y‚ÇÄ, succ(zero)))
forall y‚ÇÄ: tree :: (mirror(mirror(y‚ÇÄ)) == y‚ÇÄ)
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÅ), length(y‚ÇÄ)))
  25  nontrivial
forall y‚ÇÄ: nat :: (y‚ÇÄ == add(y‚ÇÄ, zero))
forall x‚ÇÅ: list :: (x‚ÇÅ == append(x‚ÇÅ, nil))
forall y‚ÇÄ: nat, y‚ÇÅ: nat :: (succ(add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, succ(y‚ÇÅ)))
forall y‚ÇÄ: list, x‚ÇÅ: nat :: (add(length(y‚ÇÄ), x‚ÇÅ) == add(add(x‚ÇÅ, zero), length(y‚ÇÄ)))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÅ, y‚ÇÄ), add(x‚ÇÅ, zero)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), append(y‚ÇÅ, nil)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, add(y‚ÇÅ, x‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÅ, add(y‚ÇÄ, x‚ÇÄ)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÄ, x‚ÇÅ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(x‚ÇÅ, add(y‚ÇÅ, y‚ÇÄ)))
forall x‚ÇÄ: [nat]nat, y‚ÇÄ: list, y‚ÇÅ: list :: (map(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(map(x‚ÇÄ, y‚ÇÄ), map(x‚ÇÄ, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == add(size(y‚ÇÅ), zero))
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÄ), length(y‚ÇÅ)))
forall y‚ÇÄ: nat, y‚ÇÅ: tree :: (size(insert(y‚ÇÄ, y‚ÇÅ)) == size(insert(zero, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (elems(maptree(y‚ÇÄ, y‚ÇÅ)) == map(y‚ÇÄ, elems(y‚ÇÅ)))
forall y‚ÇÄ: nat, x‚ÇÅ: nat :: (succ(add(y‚ÇÄ, x‚ÇÅ)) == add(x‚ÇÅ, succ(y‚ÇÄ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: list :: (length(map(y‚ÇÄ, y‚ÇÅ)) == length(y‚ÇÅ))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == length(elems(y‚ÇÅ)))
forall y‚ÇÄ: tree :: (succ(size(y‚ÇÄ)) == size(insert(zero, y‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat :: (add(x‚ÇÄ, succ(y‚ÇÄ)) == add(add(y‚ÇÄ, x‚ÇÄ), succ(zero)))
forall y‚ÇÄ: tree :: (length(elems(y‚ÇÄ)) == size(y‚ÇÄ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(x‚ÇÅ, y‚ÇÅ), add(y‚ÇÄ, zero)))
forall y‚ÇÄ: nat :: (succ(y‚ÇÄ) == add(y‚ÇÄ, succ(zero)))
forall y‚ÇÄ: tree :: (mirror(mirror(y‚ÇÄ)) == y‚ÇÄ)
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÅ), length(y‚ÇÄ)))
  21  reduced greedily
forall y‚ÇÄ: nat :: (y‚ÇÄ == add(y‚ÇÄ, zero))
forall x‚ÇÅ: list :: (x‚ÇÅ == append(x‚ÇÅ, nil))
forall y‚ÇÄ: nat, y‚ÇÅ: nat :: (succ(add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, succ(y‚ÇÅ)))
forall y‚ÇÄ: list, x‚ÇÅ: nat :: (add(length(y‚ÇÄ), x‚ÇÅ) == add(add(x‚ÇÅ, zero), length(y‚ÇÄ)))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÅ, y‚ÇÄ), add(x‚ÇÅ, zero)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), append(y‚ÇÅ, nil)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, add(y‚ÇÅ, x‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÅ, add(y‚ÇÄ, x‚ÇÄ)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÄ, x‚ÇÅ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(x‚ÇÅ, add(y‚ÇÅ, y‚ÇÄ)))
forall x‚ÇÄ: [nat]nat, y‚ÇÄ: list, y‚ÇÅ: list :: (map(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(map(x‚ÇÄ, y‚ÇÄ), map(x‚ÇÄ, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == add(size(y‚ÇÅ), zero))
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÄ), length(y‚ÇÅ)))
forall y‚ÇÄ: nat, y‚ÇÅ: tree :: (size(insert(y‚ÇÄ, y‚ÇÅ)) == size(insert(zero, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (elems(maptree(y‚ÇÄ, y‚ÇÅ)) == map(y‚ÇÄ, elems(y‚ÇÅ)))
forall y‚ÇÄ: nat, x‚ÇÅ: nat :: (succ(add(y‚ÇÄ, x‚ÇÅ)) == add(x‚ÇÅ, succ(y‚ÇÄ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: list :: (length(map(y‚ÇÄ, y‚ÇÅ)) == length(y‚ÇÅ))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == length(elems(y‚ÇÅ)))
forall y‚ÇÄ: tree :: (succ(size(y‚ÇÄ)) == size(insert(zero, y‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat :: (add(x‚ÇÄ, succ(y‚ÇÄ)) == add(add(y‚ÇÄ, x‚ÇÄ), succ(zero)))
forall y‚ÇÄ: tree :: (length(elems(y‚ÇÄ)) == size(y‚ÇÄ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(x‚ÇÅ, y‚ÇÅ), add(y‚ÇÄ, zero)))
forall y‚ÇÄ: nat :: (succ(y‚ÇÄ) == add(y‚ÇÄ, succ(zero)))
forall y‚ÇÄ: tree :: (mirror(mirror(y‚ÇÄ)) == y‚ÇÄ)
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÅ), length(y‚ÇÄ)))
  14  evaluation/lemmas/tree.structural.bpl
forall y‚ÇÄ: nat :: (y‚ÇÄ == add(y‚ÇÄ, zero))
forall x‚ÇÅ: list :: (x‚ÇÅ == append(x‚ÇÅ, nil))
forall y‚ÇÄ: nat, y‚ÇÅ: nat :: (succ(add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, succ(y‚ÇÅ)))
forall y‚ÇÄ: list, x‚ÇÅ: nat :: (add(length(y‚ÇÄ), x‚ÇÅ) == add(add(x‚ÇÅ, zero), length(y‚ÇÄ)))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÅ, y‚ÇÄ), add(x‚ÇÅ, zero)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), append(y‚ÇÅ, nil)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, add(y‚ÇÅ, x‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÅ, add(y‚ÇÄ, x‚ÇÄ)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÄ, x‚ÇÅ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(x‚ÇÅ, add(y‚ÇÅ, y‚ÇÄ)))
forall x‚ÇÄ: [nat]nat, y‚ÇÄ: list, y‚ÇÅ: list :: (map(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(map(x‚ÇÄ, y‚ÇÄ), map(x‚ÇÄ, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == add(size(y‚ÇÅ), zero))
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÄ), length(y‚ÇÅ)))
forall y‚ÇÄ: nat, y‚ÇÅ: tree :: (size(insert(y‚ÇÄ, y‚ÇÅ)) == size(insert(zero, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (elems(maptree(y‚ÇÄ, y‚ÇÅ)) == map(y‚ÇÄ, elems(y‚ÇÅ)))
forall y‚ÇÄ: nat, x‚ÇÅ: nat :: (succ(add(y‚ÇÄ, x‚ÇÅ)) == add(x‚ÇÅ, succ(y‚ÇÄ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: list :: (length(map(y‚ÇÄ, y‚ÇÅ)) == length(y‚ÇÅ))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == length(elems(y‚ÇÅ)))
forall y‚ÇÄ: tree :: (succ(size(y‚ÇÄ)) == size(insert(zero, y‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat :: (add(x‚ÇÄ, succ(y‚ÇÄ)) == add(add(y‚ÇÄ, x‚ÇÄ), succ(zero)))
forall y‚ÇÄ: tree :: (length(elems(y‚ÇÄ)) == size(y‚ÇÄ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(x‚ÇÅ, y‚ÇÅ), add(y‚ÇÄ, zero)))
forall y‚ÇÄ: nat :: (succ(y‚ÇÄ) == add(y‚ÇÄ, succ(zero)))
forall y‚ÇÄ: tree :: (mirror(mirror(y‚ÇÄ)) == y‚ÇÄ)
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÅ), length(y‚ÇÄ)))
  14  evaluation/lemmas/tree.conditional.bpl
forall y‚ÇÄ: nat :: (y‚ÇÄ == add(y‚ÇÄ, zero))
forall x‚ÇÅ: list :: (x‚ÇÅ == append(x‚ÇÅ, nil))
forall y‚ÇÄ: nat, y‚ÇÅ: nat :: (succ(add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, succ(y‚ÇÅ)))
forall y‚ÇÄ: list, x‚ÇÅ: nat :: (add(length(y‚ÇÄ), x‚ÇÅ) == add(add(x‚ÇÅ, zero), length(y‚ÇÄ)))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÅ, y‚ÇÄ), add(x‚ÇÅ, zero)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), append(y‚ÇÅ, nil)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÄ, add(y‚ÇÅ, x‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat, y‚ÇÅ: nat :: (add(x‚ÇÄ, add(y‚ÇÄ, y‚ÇÅ)) == add(y‚ÇÅ, add(y‚ÇÄ, x‚ÇÄ)))
forall x‚ÇÄ: list, y‚ÇÄ: list, y‚ÇÅ: list :: (append(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(append(x‚ÇÄ, y‚ÇÄ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(y‚ÇÄ, x‚ÇÅ), y‚ÇÅ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(x‚ÇÅ, add(y‚ÇÅ, y‚ÇÄ)))
forall x‚ÇÄ: [nat]nat, y‚ÇÄ: list, y‚ÇÅ: list :: (map(x‚ÇÄ, append(y‚ÇÄ, y‚ÇÅ)) == append(map(x‚ÇÄ, y‚ÇÄ), map(x‚ÇÄ, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == add(size(y‚ÇÅ), zero))
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÄ), length(y‚ÇÅ)))
forall y‚ÇÄ: nat, y‚ÇÅ: tree :: (size(insert(y‚ÇÄ, y‚ÇÅ)) == size(insert(zero, y‚ÇÅ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (elems(maptree(y‚ÇÄ, y‚ÇÅ)) == map(y‚ÇÄ, elems(y‚ÇÅ)))
forall y‚ÇÄ: nat, x‚ÇÅ: nat :: (succ(add(y‚ÇÄ, x‚ÇÅ)) == add(x‚ÇÅ, succ(y‚ÇÄ)))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: list :: (length(map(y‚ÇÄ, y‚ÇÅ)) == length(y‚ÇÅ))
forall y‚ÇÄ: [nat]nat, y‚ÇÅ: tree :: (size(maptree(y‚ÇÄ, y‚ÇÅ)) == length(elems(y‚ÇÅ)))
forall y‚ÇÄ: tree :: (succ(size(y‚ÇÄ)) == size(insert(zero, y‚ÇÄ)))
forall x‚ÇÄ: nat, y‚ÇÄ: nat :: (add(x‚ÇÄ, succ(y‚ÇÄ)) == add(add(y‚ÇÄ, x‚ÇÄ), succ(zero)))
forall y‚ÇÄ: tree :: (length(elems(y‚ÇÄ)) == size(y‚ÇÄ))
forall y‚ÇÄ: nat, y‚ÇÅ: nat, x‚ÇÅ: nat :: (add(add(y‚ÇÄ, y‚ÇÅ), x‚ÇÅ) == add(add(x‚ÇÅ, y‚ÇÅ), add(y‚ÇÄ, zero)))
forall y‚ÇÄ: nat :: (succ(y‚ÇÄ) == add(y‚ÇÄ, succ(zero)))
forall y‚ÇÄ: tree :: (mirror(mirror(y‚ÇÄ)) == y‚ÇÄ)
forall y‚ÇÄ: list, y‚ÇÅ: list :: (length(append(y‚ÇÄ, y‚ÇÅ)) == add(length(y‚ÇÅ), length(y‚ÇÄ)))
  23  evaluation/lemmas/tree.th.log
