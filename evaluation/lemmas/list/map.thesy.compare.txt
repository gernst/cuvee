evaluation/lemmas/list/map.th.log
  45  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  36  nontrivial
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  21  reduced greedily
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  26  evaluation/lemmas/list/map.structural.bpl
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  28  evaluation/lemmas/list/map.conditional.bpl
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (take(zero, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (drop(zero, ?ts_ph_list_0) == append(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == drop(zero, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (length(map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == length(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, succ(zero)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> lt(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (lt(?ts_ph_nat_1, length(?ts_ph_list_0)) <==> leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (leq(succ(?ts_ph_nat_1), length(?ts_ph_list_0)) <==> lt(?ts_ph_nat_1, length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (leq(length(?ts_ph_list_0), ?ts_ph_nat_1) <==> lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (lt(length(?ts_ph_list_0), succ(?ts_ph_nat_1)) <==> leq(length(?ts_ph_list_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_1: list :: (drop(?ts_ph_nat_0, cons(zero, ?ts_ph_list_1)) == drop(?ts_ph_nat_0, cons(?ts_ph_nat_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (drop(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_1)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_1)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0) == take(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_POfn_nat_natPC_1: [nat]nat :: (drop(length(?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == drop(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(succ(zero), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (take(succ(zero), ?ts_ph_list_0) == take(succ(zero), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), ?ts_ph_list_0) == take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (take(length(?ts_ph_list_0), append(?ts_ph_list_0, ?ts_ph_list_0)) == take(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)) == map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_POfn_nat_natPC_0: [nat]nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (map(?ts_ph_POfn_nat_natPC_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_0), map(?ts_ph_POfn_nat_natPC_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_1) <==> leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(succ(?ts_ph_nat_0), ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, drop(?ts_ph_nat_1, ?ts_ph_list_0)) == drop(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_POfn_nat_natPC_1: [nat]nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, map(?ts_ph_POfn_nat_natPC_1, ?ts_ph_list_0)) == map(?ts_ph_POfn_nat_natPC_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)) == take(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (take(?ts_ph_nat_1, ?ts_ph_list_0) == take(?ts_ph_nat_1, take(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (drop(succ(?ts_ph_nat_1), take(?ts_ph_nat_1, ?ts_ph_list_0)) == nil)
  27  evaluation/lemmas/list/map.enumerate.bpl
