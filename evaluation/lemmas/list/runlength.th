(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun add (nat nat) nat)
(=> rule1 (add zero ?n) ?n)
(=> rule2 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule3 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun mul (nat nat) nat)
(=> rule4 (mul zero ?n) zero)
(=> rule5 (mul (succ ?m) ?n) (add ?n (mul ?m ?n)))
(=> rule6 (add ?n (mul ?m ?n)) (mul (succ ?m) ?n))
(declare-fun append (list list) list)
(=> rule7 (append nil ?ys) ?ys)
(=> rule8 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule9 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun sum (list) nat)
(=> rule10 (sum nil) zero)
(=> rule11 (sum (cons ?n ?xs)) (add ?n (sum ?xs)))
(=> rule12 (add ?n (sum ?xs)) (sum (cons ?n ?xs)))
(declare-fun is_runs (list list) Bool)
(=> rule13 (is_runs nil nil) true)
(=> rule14 (is_runs (cons ?n ?ind) (cons ?x ?val)) (is_runs ?ind ?val))
(=> rule15 (is_runs (cons ?n ?ind) nil) false)
(=> rule16 (is_runs nil (cons ?x ?val)) false)
(declare-fun sumruns (list list) nat)
(=> rule17 (sumruns nil nil) zero)
(=> rule18 (sumruns (cons ?n ?ind) (cons ?x ?val)) (add (mul ?n ?x) (sumruns ?ind ?val)))
(=> rule19 (add (mul ?n ?x) (sumruns ?ind ?val)) (sumruns (cons ?n ?ind) (cons ?x ?val)))
(=> rule20 (sumruns (cons ?n ?ind) nil) zero)
(=> rule21 (sumruns nil (cons ?x ?val)) zero)
(declare-fun decode (list list) list)
(=> rule22 (decode nil nil) nil)
(=> rule23 (decode (cons zero ?ind) (cons ?x ?val)) (decode ?ind ?val))
(=> rule24 (decode (cons (succ ?n) ?ind) (cons ?x ?val)) (cons ?x (decode (cons ?n ?ind) (cons ?x ?val))))
(=> rule25 (cons ?x (decode (cons ?n ?ind) (cons ?x ?val))) (decode (cons (succ ?n) ?ind) (cons ?x ?val)))
(=> rule26 (decode (cons ?n ?ind) nil) nil)
(=> rule27 (decode nil (cons ?x ?val)) nil)
