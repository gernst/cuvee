evaluation/lemmas/list/length.enumerate.bpl
  14  number of lemmas
  0  wrong
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  14  nontrivial
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  reduced greedily
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  4  independent
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  evaluation/lemmas/list/length.structural.bpl
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  11  evaluation/lemmas/list/length.conditional.bpl
forall y₀: list :: (length(y₀) == nlength(y₀, zero))
forall x₀: nat :: (x₀ == add(x₀, zero))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)))
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)))
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)))
forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)))
forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)))
forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)))
forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)))
  10  evaluation/lemmas/list/length.th.log
