(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun leq (nat nat) Bool)
(=> rule1 (leq zero ?n) true)
(=> rule2 (leq (succ ?m) zero) false)
(=> rule3 (leq (succ ?m) (succ ?n)) (leq ?m ?n))
(=> rule4 (leq ?m ?n) (leq (succ ?m) (succ ?n)))
(declare-fun lt (nat nat) Bool)
(=> rule5 (lt ?m zero) false)
(=> rule6 (lt zero (succ ?n)) true)
(=> rule7 (lt (succ ?m) (succ ?n)) (lt ?m ?n))
(=> rule8 (lt ?m ?n) (lt (succ ?m) (succ ?n)))
(declare-fun length (list) nat)
(=> rule9 (length nil) zero)
(=> rule10 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun append (list list) list)
(=> rule11 (append nil ?ys) ?ys)
(=> rule12 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule13 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun map ((-> nat nat) list) list)
(=> rule14 (map ?f nil) nil)
(=> rule15 (map ?f (cons ?y ?ys)) (cons (select ?f ?y) (map ?f ?ys)))
(=> rule16 (cons (select ?f ?y) (map ?f ?ys)) (map ?f (cons ?y ?ys)))
(declare-fun take (nat list) list)
(=> rule17 (take ?n nil) nil)
(=> rule18 (take zero (cons ?y ?ys)) nil)
(=> rule19 (take (succ ?n) (cons ?y ?ys)) (cons ?y (take ?n ?ys)))
(=> rule20 (cons ?y (take ?n ?ys)) (take (succ ?n) (cons ?y ?ys)))
(declare-fun take_ (nat list) list)
(=> rule21 (take_ zero ?xs) nil)
(=> rule22 (take_ (succ ?n) nil) nil)
(=> rule23 (take_ (succ ?n) (cons ?y ?ys)) (cons ?y (take_ ?n ?ys)))
(=> rule24 (cons ?y (take_ ?n ?ys)) (take_ (succ ?n) (cons ?y ?ys)))
(declare-fun drop (nat list) list)
(=> rule25 (drop ?n nil) nil)
(=> rule26 (drop zero (cons ?y ?ys)) (cons ?y ?ys))
(=> rule27 (cons ?y ?ys) (drop zero (cons ?y ?ys)))
(=> rule28 (drop (succ ?n) (cons ?y ?ys)) (drop ?n ?ys))
