data nat = zero | succ(pred: nat);
data list = nil | cons(head: nat, tail: list);
function add(x₀: nat, x₁: nat): nat;
axiom forall n: nat :: (add(zero, n) == n);
axiom forall m: nat, n: nat :: (add(succ(m), n) == succ(add(m, n)));
function length(x₀: list): nat;
axiom (length(nil) == zero);
axiom forall x: nat, xs: list :: (length(cons(x, xs)) == succ(length(xs)));
function qlength(x₀: list, x₁: nat): nat;
axiom forall n: nat :: (qlength(nil, n) == n);
axiom forall x: nat, xs: list, n: nat :: (qlength(cons(x, xs), n) == qlength(xs, succ(n)));
function nlength(x₀: list, x₁: nat): nat;
axiom forall n: nat :: (nlength(nil, n) == n);
axiom forall x: nat, xs: list, n: nat :: (nlength(cons(x, xs), n) == succ(nlength(xs, n)));
lemma forall y₀: list :: (length(y₀) == nlength(y₀, zero));
lemma forall x₀: nat :: (x₀ == add(x₀, zero));
lemma forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(nlength(y₀, zero), add(y₁, x₁)));
lemma forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)));
lemma forall y₀: list, y₁: nat, x₁: nat :: (add(qlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)));
lemma forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == add(add(x₁, zero), length(y₀)));
lemma forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == add(add(x₁, zero), qlength(y₀, y₁)));
lemma forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)));
lemma forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, nlength(y₀, y₁)) == add(qlength(x₀, y₁), length(y₀)));
lemma forall y₁: list, x₁: nat :: (qlength(y₁, succ(x₁)) == nlength(y₁, succ(x₁)));
lemma forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, nlength(y₀, y₁)) == add(qlength(y₀, zero), nlength(x₀, y₁)));
lemma forall y₁: list, x₁: nat :: (succ(nlength(y₁, x₁)) == nlength(y₁, succ(x₁)));
lemma forall x₀: list, y₀: list, y₁: nat :: (nlength(x₀, qlength(y₀, y₁)) == nlength(y₀, qlength(x₀, y₁)));
lemma forall x₀: list, y₀: list, y₁: nat :: (qlength(x₀, qlength(y₀, y₁)) == add(nlength(x₀, y₁), length(y₀)));
