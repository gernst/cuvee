evaluation/lemmas/list/rotate.th.log
  32  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  24  nontrivial
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  19  reduced greedily
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  18  evaluation/lemmas/list/rotate.structural.bpl
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  18  evaluation/lemmas/list/rotate.conditional.bpl
forall ?ts_ph_list_0: list :: (rotate(zero, ?ts_ph_list_0) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == rotate(length(?ts_ph_list_0), ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (rotate(length(?ts_ph_list_0), ?ts_ph_list_0) == reverse(?ts_ph_list_0))
forall ?ts_ph_nat_0: nat :: (succ(?ts_ph_nat_0) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == succ(?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (rotate(?ts_ph_nat_0, cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, nil))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> leq(?ts_ph_nat_1, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_1), succ(?ts_ph_nat_0)) <==> leq(?ts_ph_nat_1, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_list_0: list :: (reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)) == rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (rotate(length(?ts_ph_list_0), cons(?ts_ph_nat_0, ?ts_ph_list_0)) == reverse(cons(?ts_ph_nat_0, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), ?ts_ph_nat_0) <==> leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (leq(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> leq(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(?ts_ph_nat_1, add(?ts_ph_nat_0, ?ts_ph_nat_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (length(?ts_ph_list_0) == length(reverse(?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (length(reverse(?ts_ph_list_0)) == length(?ts_ph_list_0))
  7  evaluation/lemmas/list/rotate.enumerate.bpl
