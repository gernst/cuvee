evaluation/lemmas/list/runlength.enumerate.bpl
  14  number of lemmas
  0  wrong
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  14  nontrivial
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  14  reduced greedily
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  6  independent
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  11  evaluation/lemmas/list/runlength.structural.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  11  evaluation/lemmas/list/runlength.conditional.bpl
forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)))
forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)))
forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)))
forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)))
forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀))
forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)))
forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)))
forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)))
forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀))
  12  evaluation/lemmas/list/runlength.th.log
