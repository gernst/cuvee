(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun append (list list) list)
(=> rule1 (append nil ?ys) ?ys)
(=> rule2 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule3 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun reverse (list) list)
(=> rule4 (reverse nil) nil)
(=> rule5 (reverse (cons ?y ?ys)) (append (reverse ?ys) (cons ?y nil)))
(=> rule6 (append (reverse ?ys) (cons ?y nil)) (reverse (cons ?y ?ys)))
(declare-fun qreverse (list list) list)
(=> rule7 (qreverse nil ?zs) ?zs)
(=> rule8 (qreverse (cons ?y ?ys) ?zs) (qreverse ?ys (cons ?y ?zs)))
(=> rule9 (qreverse ?ys (cons ?y ?zs)) (qreverse (cons ?y ?ys) ?zs))
(declare-fun nreverse (list list) list)
(=> rule10 (nreverse nil ?zs) ?zs)
(=> rule11 (nreverse (cons ?y ?ys) ?zs) (append (nreverse ?ys ?zs) (cons ?y nil)))
(=> rule12 (append (nreverse ?ys ?zs) (cons ?y nil)) (nreverse (cons ?y ?ys) ?zs))
