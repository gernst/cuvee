evaluation/lemmas/list/runlength.th.log
  10  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  nontrivial
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  reduced greedily
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  evaluation/lemmas/list/runlength.structural.bpl
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  4  evaluation/lemmas/list/runlength.conditional.bpl
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, ?ts_ph_list_0) <==> true)
forall ?ts_ph_list_0: list :: (sumruns(nil, ?ts_ph_list_0) == zero)
forall ?ts_ph_list_0: list :: (sumruns(?ts_ph_list_0, nil) == zero)
forall ?ts_ph_list_0: list :: (decode(?ts_ph_list_0, nil) == nil)
forall ?ts_ph_list_0: list :: (decode(nil, ?ts_ph_list_0) == nil)
forall ?ts_ph_list_0: list :: (is_runs(?ts_ph_list_0, nil) <==> is_runs(nil, ?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (is_runs(nil, ?ts_ph_list_0) <==> is_runs(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
  5  evaluation/lemmas/list/runlength.enumerate.bpl
