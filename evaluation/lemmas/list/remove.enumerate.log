0 of 57
1 of 57
2 of 57
3 of 57
4 of 57
5 of 57
6 of 57
7 of 57
8 of 57
9 of 57
10 of 57
11 of 57
12 of 57
13 of 57
14 of 57
15 of 57
16 of 57
17 of 57
18 of 57
19 of 57
20 of 57
21 of 57
22 of 57
23 of 57
24 of 57
25 of 57
26 of 57
27 of 57
28 of 57
29 of 57
30 of 57
31 of 57
32 of 57
33 of 57
34 of 57
35 of 57
36 of 57
37 of 57
38 of 57
39 of 57
40 of 57
41 of 57
42 of 57
43 of 57
44 of 57
45 of 57
46 of 57
47 of 57
48 of 57
49 of 57
50 of 57
51 of 57
52 of 57
53 of 57
54 of 57
55 of 57
56 of 57
round 1 (32916 candidates)
19:24:56 round 1 candidate 0/32916 false unknown
19:24:56 round 1 candidate 1/32916 true unsat
19:24:56 round 1 candidate 2/32916 forall y₀: list, x₁: list :: (x₁ == y₀) cex
19:24:56 round 1 candidate 3/32916 forall x₀: nat :: (x₀ == zero) cex
19:24:56 round 1 candidate 4/32916 forall x₀: nat, y₀: nat :: (x₀ == y₀) cex
19:24:56 round 1 candidate 5/32916 forall y₁: list :: (y₁ == nil) cex
19:24:56 round 1 candidate 6/32916 forall y₁: list, x₁: list :: (x₁ == y₁) cex
19:24:56 round 1 candidate 7/32916 forall x₁: list :: (x₁ == nil) cex
19:24:56 round 1 candidate 8/32916 forall x₀: nat, y₀: nat :: (y₀ == x₀) cex
19:24:56 round 1 candidate 9/32916 forall y₀: nat :: (y₀ == zero) cex
19:24:56 round 1 candidate 10/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₁)) cex
19:24:56 round 1 candidate 11/32916 forall y₁: nat, x₁: list :: (x₁ == remove(y₁, x₁)) unknown
19:24:56 round 1 candidate 12/32916 forall x₀: nat, y₀: nat :: (x₀ == sub(zero, y₀)) cex
19:24:56 round 1 candidate 13/32916 forall y₀: nat, y₁: list :: (length(y₁) == y₀) cex
19:24:56 round 1 candidate 14/32916 forall y₀: list, x₁: list :: (x₁ == remove(zero, y₀)) cex
19:24:56 round 1 candidate 15/32916 forall y₀: list :: (length(y₀) == zero) cex
19:24:56 round 1 candidate 16/32916 forall y₀: list, x₁: list :: contains(length(y₀), x₁) cex
19:24:56 round 1 candidate 17/32916 forall y₀: Bool :: not_(not_(y₀)) unknown
19:24:57 round 1 candidate 18/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₁, zero)) cex
19:24:57 round 1 candidate 19/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == succ(zero)) cex
19:24:57 round 1 candidate 20/32916 forall x₀: nat, y₁: list :: ((x₀ == zero) && (y₁ == nil)) cex
19:24:57 round 1 candidate 21/32916 forall x₀: nat, y₀: nat :: (x₀ == sub(y₀, x₀)) cex
19:24:57 round 1 candidate 22/32916 forall y₀: nat, y₁: nat, x₁: list :: (sub(y₀, y₁) == length(x₁)) cex
19:24:57 round 1 candidate 23/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(y₀, y₁) == remove(x₀, y₁)) unknown
19:24:57 round 1 candidate 24/32916 forall y₁: list :: (length(y₁) == zero) cex
19:24:57 round 1 candidate 25/32916 forall y₀: nat, y₁: nat, x₁: list :: contains(sub(y₀, y₁), x₁) cex
19:24:57 round 1 candidate 26/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == y₀) cex
19:24:57 round 1 candidate 27/32916 forall y₀: nat, x₁: list :: (x₁ == cons(y₀, nil)) cex
19:24:57 round 1 candidate 28/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(y₀, y₀)) cex
19:24:57 round 1 candidate 29/32916 forall y₀: list :: (length(y₀) == count(zero, y₀)) unknown
19:24:57 round 1 candidate 30/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₀, y₁)) cex
19:24:57 round 1 candidate 31/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == y₁) cex
19:24:57 round 1 candidate 32/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(x₀, nil)) cex
19:24:57 round 1 candidate 33/32916 forall y₀: nat, y₁: nat, x₁: list :: (add(y₀, y₁) == length(x₁)) cex
19:24:57 round 1 candidate 34/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(zero, y₀)) cex
19:24:57 round 1 candidate 35/32916 forall y₁: list :: (length(y₁) == succ(zero)) cex
19:24:57 round 1 candidate 36/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₀, zero)) cex
19:24:57 round 1 candidate 37/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == y₀) cex
19:24:57 round 1 candidate 38/32916 forall y₀: nat, y₁: nat, x₁: list :: (add(y₀, y₁) == count(y₀, x₁)) cex
19:24:57 round 1 candidate 39/32916 forall y₀: nat, y₁: nat, x₁: list :: (sub(y₀, y₁) == count(y₁, x₁)) cex
19:24:57 round 1 candidate 40/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀)) unknown
19:24:57 round 1 candidate 41/32916 forall y₀: nat, y₁: list :: (cons(y₀, y₁) == remove(y₀, y₁)) cex
19:24:57 round 1 candidate 42/32916 forall y₀: nat, x₁: list :: (x₁ == remove(y₀, x₁)) unknown
19:24:57 round 1 candidate 43/32916 forall y₀: list, x₁: list :: (length(y₀) == length(x₁)) cex
19:24:57 round 1 candidate 44/32916 forall y₁: nat, x₁: list :: (x₁ == cons(y₁, nil)) cex
19:24:57 round 1 candidate 45/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == sub(y₀, y₀)) cex
19:24:57 round 1 candidate 46/32916 forall y₀: nat, y₁: list :: (length(y₁) == count(y₀, y₁)) unknown
19:24:57 round 1 candidate 47/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, y₀)) unknown
19:24:58 round 1 candidate 48/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == y₁) cex
19:24:58 round 1 candidate 49/32916 forall x₀: nat, y₀: nat, y₁: list :: ((x₀ == y₀) && (y₁ == nil)) cex
19:24:58 round 1 candidate 50/32916 forall x₀: nat :: (x₀ == sub(x₀, x₀)) cex
19:24:58 round 1 candidate 51/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(zero, y₀)) cex
19:24:58 round 1 candidate 52/32916 forall y₀: nat, y₁: list :: (length(y₁) == sub(zero, y₀)) cex
19:24:58 round 1 candidate 53/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == succ(y₀)) cex
19:24:58 round 1 candidate 54/32916 forall x₁: list :: (x₁ == cons(zero, nil)) cex
19:24:58 round 1 candidate 55/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == sub(y₀, y₀)) unknown
19:24:58 round 1 candidate 56/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, y₀)) cex
19:24:58 round 1 candidate 57/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(zero, x₁)) cex
19:24:58 round 1 candidate 58/32916 forall x₀: nat, y₀: nat :: ((x₀ == zero) && (y₀ == x₀)) cex
19:24:58 round 1 candidate 59/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == y₀) cex
19:24:58 round 1 candidate 60/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₀, zero)) cex
19:24:58 round 1 candidate 61/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == x₁) cex
19:24:58 round 1 candidate 62/32916 forall y₀: nat :: (succ(y₀) == sub(y₀, y₀)) cex
19:24:58 round 1 candidate 63/32916 forall x₀: nat, y₀: nat :: ((x₀ == y₀) && (y₀ == x₀)) cex
19:24:58 round 1 candidate 64/32916 forall y₀: nat, x₁: list :: (succ(y₀) == count(zero, x₁)) cex
19:24:58 round 1 candidate 65/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == nil) unknown
19:24:58 round 1 candidate 66/32916 forall y₀: nat, x₁: list :: ((y₀ == zero) && (x₁ == nil)) cex
19:24:58 round 1 candidate 67/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(zero, nil)) cex
19:24:58 round 1 candidate 68/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(y₀, y₁)) cex
19:24:58 round 1 candidate 69/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₁, y₁)) cex
19:24:58 round 1 candidate 70/32916 forall x₀: nat, y₀: nat :: (x₀ == add(y₀, zero)) cex
19:24:58 round 1 candidate 71/32916 forall y₀: nat, y₁: nat, x₁: list :: (add(y₀, y₁) == count(zero, x₁)) cex
19:24:58 round 1 candidate 72/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == zero) unknown
19:24:58 round 1 candidate 73/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == succ(zero)) cex
19:24:58 round 1 candidate 74/32916 forall y₀: nat, y₁: list, x₁: list :: (count(y₀, y₁) == count(zero, x₁)) unknown
19:24:58 round 1 candidate 75/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == y₁) unknown
19:24:58 round 1 candidate 76/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == succ(y₀)) cex
19:24:58 round 1 candidate 77/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == zero) cex
19:24:58 round 1 candidate 78/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(y₀, y₁)) cex
19:24:58 round 1 candidate 79/32916 forall y₀: nat, y₁: list :: (length(y₁) == add(y₀, zero)) cex
19:24:58 round 1 candidate 80/32916 forall y₀: nat, y₁: nat, x₁: list :: contains(add(y₀, y₁), x₁) cex
19:24:58 round 1 candidate 81/32916 forall y₀: nat, y₁: list :: (length(y₁) == sub(y₀, y₀)) cex
19:24:58 round 1 candidate 82/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₀, y₀)) cex
19:24:58 round 1 candidate 83/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == y₀) cex
19:24:58 round 1 candidate 84/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == succ(y₀)) cex
19:24:58 round 1 candidate 85/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == succ(y₁)) cex
19:24:58 round 1 candidate 86/32916 forall y₀: nat :: (succ(y₀) == add(y₀, zero)) cex
19:24:58 round 1 candidate 87/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(zero, y₁)) cex
19:24:58 round 1 candidate 88/32916 forall y₀: nat, y₁: list :: (length(y₁) == succ(y₀)) cex
19:24:58 round 1 candidate 89/32916 forall x₀: nat, y₁: list :: (x₀ == count(x₀, y₁)) cex
19:24:58 round 1 candidate 90/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == zero) cex
19:24:58 round 1 candidate 91/32916 forall y₀: nat, y₁: list, x₁: list :: contains(count(y₀, y₁), x₁) cex
19:24:58 round 1 candidate 92/32916 forall y₀: nat :: (succ(y₀) == sub(zero, y₀)) cex
19:24:58 round 1 candidate 93/32916 forall x₀: nat, y₀: nat, y₁: list :: (x₀ == count(y₀, y₁)) cex
19:24:58 round 1 candidate 94/32916 forall y₀: nat, y₁: list, x₁: list :: (count(y₀, y₁) == length(x₁)) cex
19:24:58 round 1 candidate 95/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == add(y₀, zero)) cex
19:24:58 round 1 candidate 96/32916 forall x₀: nat :: (x₀ == add(x₀, zero)) proved
19:24:59 round 1 candidate 97/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == count(zero, y₁)) unknown
19:24:59 round 1 candidate 98/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(x₀, y₁)) cex
19:24:59 round 1 candidate 99/32916 forall y₀: nat, y₁: list, x₁: list :: (x₁ == remove(y₀, y₁)) cex
19:24:59 round 1 candidate 100/32916 forall x₀: nat :: (x₀ == add(x₀, x₀)) cex
19:24:59 round 1 candidate 101/32916 forall y₀: nat, x₁: list :: contains(succ(y₀), x₁) cex
19:24:59 round 1 candidate 102/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == length(y₁)) unknown
19:24:59 round 1 candidate 103/32916 forall x₀: nat :: (x₀ == sub(zero, x₀)) cex
19:24:59 round 1 candidate 104/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == sub(zero, y₁)) cex
19:24:59 round 1 candidate 105/32916 forall x₁: list :: (x₁ == remove(zero, x₁)) unknown
19:24:59 round 1 candidate 106/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, zero)) cex
19:24:59 round 1 candidate 107/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == succ(y₀)) cex
19:24:59 round 1 candidate 108/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == remove(zero, y₁)) unknown
19:24:59 round 1 candidate 109/32916 forall y₀: nat, y₁: list, x₁: list :: (x₁ == cons(y₀, y₁)) cex
19:24:59 round 1 candidate 110/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == add(y₀, y₀)) cex
19:24:59 round 1 candidate 111/32916 forall x₀: nat, y₁: list :: (x₀ == count(zero, y₁)) cex
19:24:59 round 1 candidate 112/32916 forall y₁: list, x₁: list :: (x₁ == cons(zero, y₁)) cex
19:24:59 round 1 candidate 113/32916 forall y₀: nat, y₁: list :: not_(contains(y₀, y₁)) unknown
19:24:59 round 1 candidate 114/32916 forall y₀: nat, y₁: list :: ((y₀ == zero) && (y₁ == nil)) cex
19:24:59 round 1 candidate 115/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == sub(y₁, y₁)) cex
19:24:59 round 1 candidate 116/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == succ(x₁)) cex
19:24:59 round 1 candidate 117/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, x₁)) cex
19:24:59 round 1 candidate 118/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(y₀, y₀)) cex
19:24:59 round 1 candidate 119/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₀, y₀)) cex
19:24:59 round 1 candidate 120/32916 forall y₀: nat, y₁: list :: (remove(y₀, y₁) == cons(y₀, nil)) cex
19:24:59 round 1 candidate 121/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(y₁, y₁)) cex
19:24:59 round 1 candidate 122/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(y₀, x₁)) cex
19:24:59 round 1 candidate 123/32916 forall y₀: list, x₁: list :: (x₁ == cons(zero, y₀)) cex
19:24:59 round 1 candidate 124/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == zero) cex
19:24:59 round 1 candidate 125/32916 forall x₀: nat, y₀: nat :: ((x₀ == y₀) && (y₀ == zero)) cex
19:24:59 round 1 candidate 126/32916 forall y₀: list, x₁: list :: (length(y₀) == count(zero, x₁)) cex
19:24:59 round 1 candidate 127/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == succ(zero)) cex
19:24:59 round 1 candidate 128/32916 forall y₀: nat :: (succ(y₀) == add(y₀, y₀)) cex
19:24:59 round 1 candidate 129/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == sub(zero, y₀)) cex
19:24:59 round 1 candidate 130/32916 forall y₀: nat, y₁: nat, x₁: list :: (sub(y₀, y₁) == count(y₀, x₁)) cex
19:24:59 round 1 candidate 131/32916 forall y₀: nat, y₁: list :: (length(y₁) == add(y₀, y₀)) cex
19:24:59 round 1 candidate 132/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(x₁, x₁)) cex
19:24:59 round 1 candidate 133/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == sub(x₁, y₀)) cex
19:24:59 round 1 candidate 134/32916 forall y₀: list :: (length(y₀) == succ(zero)) cex
19:24:59 round 1 candidate 135/32916 forall y₀: nat, y₁: list, x₁: list :: (count(y₀, y₁) == count(y₀, x₁)) unknown
19:25:00 round 1 candidate 136/32916 forall x₀: nat :: (x₀ == succ(zero)) cex
19:25:00 round 1 candidate 137/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, zero)) cex
19:25:00 round 1 candidate 138/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(y₁, y₀)) cex
19:25:00 round 1 candidate 139/32916 forall y₀: nat, x₁: list :: (succ(y₀) == length(x₁)) cex
19:25:00 round 1 candidate 140/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == succ(y₁)) cex
19:25:00 round 1 candidate 141/32916 forall y₀: nat, y₁: nat, x₁: list :: (add(y₀, y₁) == count(y₁, x₁)) cex
19:25:00 round 1 candidate 142/32916 forall x₀: nat, y₀: nat :: (x₀ == add(x₀, y₀)) cex
19:25:00 round 1 candidate 143/32916 forall x₀: nat, y₁: list :: (x₀ == length(y₁)) cex
19:25:00 round 1 candidate 144/32916 forall x₀: nat, y₀: nat :: (x₀ == add(y₀, x₀)) cex
19:25:00 round 1 candidate 145/32916 forall y₀: nat, y₁: list :: (cons(y₀, y₁) == remove(zero, y₁)) cex
19:25:00 round 1 candidate 146/32916 forall y₀: nat, y₁: nat, x₁: list :: (sub(y₀, y₁) == count(zero, x₁)) cex
19:25:00 round 1 candidate 147/32916 forall x₀: nat, y₀: nat, y₁: list :: (cons(y₀, y₁) == remove(x₀, y₁)) cex
19:25:00 round 1 candidate 148/32916 forall x₀: nat, y₀: nat, y₁: list :: contains(x₀, remove(y₀, y₁)) cex
19:25:00 round 1 candidate 149/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(x₁, zero)) cex
19:25:00 round 1 candidate 150/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == succ(zero)) cex
19:25:00 round 1 candidate 151/32916 forall x₀: nat, y₀: nat :: (x₀ == succ(y₀)) cex
19:25:00 round 1 candidate 152/32916 forall y₀: nat, y₁: list :: (count(y₀, y₁) == sub(zero, y₀)) unknown
19:25:00 round 1 candidate 153/32916 forall x₀: nat, y₀: nat, y₁: list :: contains(x₀, cons(y₀, y₁)) unknown
19:25:00 round 1 candidate 154/32916 forall x₀: nat, y₀: nat, y₁: list :: ((y₀ == x₀) && (y₁ == nil)) cex
19:25:00 round 1 candidate 155/32916 forall x₀: nat, y₀: nat :: (x₀ == sub(x₀, y₀)) cex
19:25:00 round 1 candidate 156/32916 forall y₁: list :: (length(y₁) == count(zero, y₁)) unknown
19:25:00 round 1 candidate 157/32916 forall y₀: nat, y₁: nat :: (add(y₀, y₁) == sub(zero, y₁)) cex
19:25:00 round 1 candidate 158/32916 forall x₀: nat, y₀: nat :: ((x₀ == zero) && (y₀ == zero)) cex
19:25:00 round 1 candidate 159/32916 forall y₀: nat, x₁: list :: (succ(y₀) == count(y₀, x₁)) cex
19:25:00 round 1 candidate 160/32916 forall y₁: list, x₁: list :: (x₁ == remove(zero, y₁)) cex
19:25:00 round 1 candidate 161/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == add(y₁, y₀)) cex
19:25:00 round 1 candidate 162/32916 forall y₀: nat, y₁: nat :: (sub(y₀, y₁) == sub(y₁, y₀)) cex
19:25:00 round 1 candidate 163/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == sub(sub(x₀, x₀), succ(y₀))) unknown
19:25:00 round 1 candidate 164/32916 forall y₀: nat, y₁: list :: (succ(count(y₀, y₁)) == sub(length(y₁), add(y₀, y₀))) cex
19:25:00 round 1 candidate 165/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == sub(add(x₁, x₁), sub(zero, y₀))) cex
19:25:00 round 1 candidate 166/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == count(y₀, cons(y₀, nil))) unknown
19:25:01 round 1 candidate 167/32916 forall x₀: nat, y₀: list :: (add(x₀, length(y₀)) == sub(add(x₀, zero), length(y₀))) cex
19:25:01 round 1 candidate 168/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(succ(y₀), sub(y₀, y₁))) cex
19:25:01 round 1 candidate 169/32916 forall y₀: nat, y₁: nat, x₁: list :: ((add(y₀, y₁) == sub(zero, y₁)) && (x₁ == nil)) cex
19:25:01 round 1 candidate 170/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₁, y₁), y₀)) cex
19:25:01 round 1 candidate 171/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == count(zero, cons(zero, y₁))) unknown
19:25:01 round 1 candidate 172/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == add(add(x₁, zero), add(y₁, zero))) cex
19:25:01 round 1 candidate 173/32916 forall y₀: nat, y₁: list :: (length(remove(y₀, y₁)) == sub(length(y₁), succ(y₀))) unknown
19:25:01 round 1 candidate 174/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == count(add(y₀, y₀), remove(x₀, y₁))) unknown
19:25:01 round 1 candidate 175/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == sub(add(y₀, y₀), add(x₀, zero))) cex
19:25:01 round 1 candidate 176/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(sub(y₁, y₁), y₀)) cex
19:25:01 round 1 candidate 177/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == add(sub(y₁, y₁), sub(x₀, x₀))) cex
19:25:01 round 1 candidate 178/32916 forall y₀: nat, y₁: nat, x₁: list :: (cons(add(y₀, y₁), x₁) == remove(add(y₁, y₁), cons(zero, nil))) unknown
19:25:01 round 1 candidate 179/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == sub(y₁, sub(y₁, y₀))) cex
19:25:01 round 1 candidate 180/32916 forall y₀: nat, y₁: nat, x₁: list :: (contains(add(y₀, y₁), x₁) <==> contains(succ(y₀), x₁)) unknown
19:25:02 round 1 candidate 181/32916 forall y₀: nat, y₁: nat, x₁: list :: (contains(sub(y₀, y₁), x₁) <==> contains(count(y₀, x₁), cons(zero, x₁))) unknown
19:25:02 round 1 candidate 182/32916 forall y₀: nat, y₁: list, x₁: list :: (count(count(y₀, y₁), x₁) == count(length(x₁), x₁)) unknown
19:25:02 round 1 candidate 183/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == sub(y₀, count(zero, y₁))) cex
19:25:02 round 1 candidate 184/32916 forall y₀: nat, y₁: list, x₁: list :: (contains(count(y₀, y₁), x₁) <==> contains(count(zero, y₁), remove(y₀, x₁))) unknown
19:25:02 round 1 candidate 185/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, add(y₁, y₁))) cex
19:25:02 round 1 candidate 186/32916 forall y₀: nat, y₁: list, x₁: list :: ((count(y₀, y₁) == count(y₀, x₁)) && (x₁ == remove(y₀, x₁))) unknown
19:25:03 round 1 candidate 187/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == sub(add(y₀, x₀), count(x₀, y₁))) unknown
19:25:03 round 1 candidate 188/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == sub(y₀, x₁)) cex
19:25:03 round 1 candidate 189/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == sub(sub(x₀, x₀), y₀)) cex
19:25:03 round 1 candidate 190/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == sub(sub(y₀, x₀), x₀)) unknown
19:25:03 round 1 candidate 191/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(zero, y₁), add(y₀, zero))) cex
19:25:03 round 1 candidate 192/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == sub(succ(x₁), sub(y₀, y₀))) cex
19:25:03 round 1 candidate 193/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(succ(x₀), cons(x₀, y₁))) unknown
19:25:03 round 1 candidate 194/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(y₁, y₁), x₁)) cex
19:25:03 round 1 candidate 195/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(add(y₀, x₀), sub(zero, x₀))) cex
19:25:03 round 1 candidate 196/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(sub(y₀, y₁), x₁) == remove(count(y₁, x₁), x₁)) unknown
19:25:03 round 1 candidate 197/32916 forall y₀: nat, y₁: nat :: (succ(sub(y₀, y₁)) == sub(add(y₁, zero), sub(y₀, y₀))) cex
19:25:03 round 1 candidate 198/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == sub(sub(zero, y₀), sub(x₀, y₀))) cex
19:25:03 round 1 candidate 199/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == add(add(y₀, zero), succ(x₁))) cex
19:25:03 round 1 candidate 200/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(sub(y₁, y₀), add(y₀, y₁))) cex
19:25:03 round 1 candidate 201/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == add(sub(y₀, x₀), succ(y₀))) unknown
19:25:04 round 1 candidate 202/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(sub(zero, y₀), sub(y₁, y₁))) cex
19:25:04 round 1 candidate 203/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(count(zero, y₁), x₀)) unknown
19:25:04 round 1 candidate 204/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(sub(x₀, y₁), sub(y₁, x₀))) cex
19:25:04 round 1 candidate 205/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == cons(y₁, cons(zero, nil))) cex
19:25:04 round 1 candidate 206/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(add(y₀, zero), succ(x₀))) cex
19:25:04 round 1 candidate 207/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == count(add(x₁, y₁), cons(y₁, nil))) unknown
19:25:04 round 1 candidate 208/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == add(sub(zero, y₀), add(x₁, y₀))) cex
19:25:04 round 1 candidate 209/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(sub(y₀, y₁), x₁) == remove(count(y₀, x₁), cons(y₁, nil))) unknown
19:25:04 round 1 candidate 210/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(succ(y₀), cons(zero, nil))) unknown
19:25:05 round 1 candidate 211/32916 forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == count(count(zero, y₀), remove(x₁, y₀))) cex
19:25:05 round 1 candidate 212/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(x₁, add(x₁, zero))) cex
19:25:05 round 1 candidate 213/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == sub(count(y₀, x₁), y₀)) unknown
19:25:05 round 1 candidate 214/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == add(add(x₁, y₁), succ(y₀))) cex
19:25:05 round 1 candidate 215/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, cons(y₀, y₁)) == cons(add(y₀, zero), remove(zero, y₁))) unknown
19:25:05 round 1 candidate 216/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(y₁, y₀), x₁)) cex
19:25:05 round 1 candidate 217/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == sub(add(y₁, x₁), sub(y₁, y₀))) cex
19:25:05 round 1 candidate 218/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == sub(add(y₀, y₀), count(zero, y₁))) cex
19:25:05 round 1 candidate 219/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == sub(sub(zero, y₀), succ(y₀))) cex
19:25:05 round 1 candidate 220/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, y₀), sub(y₁, y₁))) cex
19:25:05 round 1 candidate 221/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == add(add(x₁, y₁), add(y₁, zero))) cex
19:25:05 round 1 candidate 222/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, cons(y₀, y₁)) == cons(sub(x₀, x₀), cons(y₀, y₁))) unknown
19:25:05 round 1 candidate 223/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == add(count(y₀, y₁), succ(zero))) cex
19:25:05 round 1 candidate 224/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == sub(sub(x₁, y₀), succ(x₁))) cex
19:25:05 round 1 candidate 225/32916 forall y₀: nat, x₁: list :: (contains(succ(y₀), x₁) <==> contains(sub(zero, y₀), cons(zero, nil))) unknown
19:25:05 round 1 candidate 226/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, cons(y₀, y₁)) == cons(zero, cons(zero, nil))) unknown
19:25:06 round 1 candidate 227/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(add(y₀, y₀), length(y₁))) cex
19:25:06 round 1 candidate 228/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(succ(y₁), add(x₁, y₁))) cex
19:25:06 round 1 candidate 229/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == sub(y₀, sub(y₀, x₀))) cex
19:25:06 round 1 candidate 230/32916 forall y₀: nat, y₁: nat, x₁: list :: ((add(y₀, y₁) == count(y₀, x₁)) && (x₁ == nil)) cex
19:25:06 round 1 candidate 231/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == sub(add(x₁, zero), count(x₁, y₁))) cex
19:25:06 round 1 candidate 232/32916 forall y₀: nat, y₁: list, x₁: list :: (count(count(y₀, y₁), x₁) == sub(succ(zero), length(y₁))) cex
19:25:06 round 1 candidate 233/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == count(succ(y₀), cons(x₀, nil))) unknown
19:25:06 round 1 candidate 234/32916 forall y₀: list, x₁: list :: ((length(y₀) == length(x₁)) && (x₁ == cons(zero, y₀))) cex
19:25:06 round 1 candidate 235/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(sub(y₁, y₀), add(y₁, x₁))) cex
19:25:06 round 1 candidate 236/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == sub(y₀, succ(y₀))) cex
19:25:06 round 1 candidate 237/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == sub(zero, sub(x₁, y₀))) unknown
19:25:06 round 1 candidate 238/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == add(sub(x₀, y₀), length(y₁))) cex
19:25:06 round 1 candidate 239/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == count(succ(zero), cons(x₀, nil))) unknown
19:25:06 round 1 candidate 240/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(sub(zero, y₀), add(x₁, zero))) cex
19:25:06 round 1 candidate 241/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(add(y₁, x₀), add(x₀, y₁))) cex
19:25:06 round 1 candidate 242/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, remove(y₀, y₁)) <==> contains(count(y₀, y₁), cons(x₀, nil))) unknown
19:25:07 round 1 candidate 243/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == sub(sub(zero, y₀), x₀)) cex
19:25:07 round 1 candidate 244/32916 forall y₀: nat, y₁: list :: (succ(count(y₀, y₁)) == count(count(zero, y₁), cons(zero, y₁))) unknown
19:25:07 round 1 candidate 245/32916 forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(sub(y₀, y₀), add(x₁, zero))) cex
19:25:07 round 1 candidate 246/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == sub(add(x₀, zero), x₀)) cex
19:25:07 round 1 candidate 247/32916 forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == sub(x₁, sub(y₀, y₀))) cex
19:25:07 round 1 candidate 248/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == remove(add(y₁, y₀), cons(zero, nil))) unknown
19:25:07 round 1 candidate 249/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(succ(y₀), add(y₁, y₀))) cex
19:25:07 round 1 candidate 250/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(sub(y₀, y₁), add(x₀, y₀))) cex
19:25:07 round 1 candidate 251/32916 forall y₀: nat, x₁: list :: (count(succ(y₀), x₁) == add(count(zero, x₁), sub(zero, y₀))) unknown
19:25:07 round 1 candidate 252/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == sub(sub(x₀, x₀), succ(y₀))) cex
19:25:07 round 1 candidate 253/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(add(x₀, y₁), add(y₁, zero))) cex
19:25:07 round 1 candidate 254/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == count(sub(zero, y₀), cons(zero, nil))) unknown
19:25:07 round 1 candidate 255/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, x₁), add(x₁, y₀))) cex
19:25:07 round 1 candidate 256/32916 forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == sub(add(y₀, y₀), succ(y₁))) cex
19:25:07 round 1 candidate 257/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == count(sub(y₀, x₁), remove(x₁, y₁))) cex
19:25:07 round 1 candidate 258/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == count(succ(zero), remove(zero, y₁))) unknown
19:25:08 round 1 candidate 259/32916 forall y₀: nat, y₁: nat, x₁: list :: (cons(sub(y₀, y₁), x₁) == remove(count(y₁, x₁), remove(y₁, x₁))) cex
19:25:08 round 1 candidate 260/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == add(add(y₀, zero), add(y₁, y₁))) cex
19:25:08 round 1 candidate 261/32916 forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == succ(add(x₀, y₀))) cex
19:25:08 round 1 candidate 262/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == sub(sub(x₀, y₀), succ(y₀))) cex
19:25:08 round 1 candidate 263/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(add(y₁, y₁), succ(y₀))) cex
19:25:08 round 1 candidate 264/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(y₀, add(x₁, zero))) cex
19:25:08 round 1 candidate 265/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(x₀, sub(x₀, y₀))) cex
19:25:08 round 1 candidate 266/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(add(x₀, x₀), add(y₁, y₁))) cex
19:25:08 round 1 candidate 267/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(add(y₀, y₀), sub(zero, y₁))) cex
19:25:08 round 1 candidate 268/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == add(y₁, succ(zero))) cex
19:25:08 round 1 candidate 269/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(add(y₀, y₁), sub(zero, y₁))) cex
19:25:08 round 1 candidate 270/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(y₀, add(y₁, x₁))) cex
19:25:08 round 1 candidate 271/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(add(x₀, x₀), length(y₁))) cex
19:25:08 round 1 candidate 272/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), succ(y₀))) cex
19:25:08 round 1 candidate 273/32916 forall y₀: nat, x₁: nat :: (sub(succ(y₀), x₁) == add(add(y₀, x₁), sub(x₁, y₀))) cex
19:25:08 round 1 candidate 274/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(sub(zero, x₀), sub(zero, x₀))) cex
19:25:08 round 1 candidate 275/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == count(add(y₁, y₁), cons(zero, x₁))) unknown
19:25:08 round 1 candidate 276/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, remove(y₀, y₁)) <==> contains(add(x₀, zero), cons(zero, y₁))) unknown
19:25:08 round 1 candidate 277/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == sub(sub(zero, y₀), add(y₀, zero))) cex
19:25:08 round 1 candidate 278/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(x₀, sub(y₀, y₀))) unknown
19:25:08 round 1 candidate 279/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(sub(zero, y₁), add(y₀, zero))) cex
19:25:08 round 1 candidate 280/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(succ(y₀), add(y₀, x₀))) cex
19:25:08 round 1 candidate 281/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == add(add(y₁, x₁), sub(y₀, y₁))) cex
19:25:08 round 1 candidate 282/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(zero, x₁), add(y₁, x₁))) cex
19:25:08 round 1 candidate 283/32916 forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == succ(x₁)) cex
19:25:08 round 1 candidate 284/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == count(count(x₀, y₁), remove(y₀, y₁))) unknown
19:25:09 round 1 candidate 285/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == count(add(x₀, y₀), cons(zero, nil))) unknown
19:25:09 round 1 candidate 286/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == sub(add(y₁, zero), sub(y₀, y₁))) cex
19:25:09 round 1 candidate 287/32916 forall x₀: nat, y₀: nat, y₁: list :: ((x₀ == count(zero, y₁)) && (remove(y₀, y₁) == cons(x₀, y₁))) cex
19:25:09 round 1 candidate 288/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, sub(y₀, y₁))) cex
19:25:09 round 1 candidate 289/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == add(sub(y₀, y₀), sub(zero, x₁))) cex
19:25:09 round 1 candidate 290/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(sub(y₀, x₀), add(x₀, y₀))) cex
19:25:09 round 1 candidate 291/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == sub(sub(x₁, y₀), succ(y₀))) cex
19:25:09 round 1 candidate 292/32916 forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == sub(add(y₁, zero), add(y₀, zero))) cex
19:25:09 round 1 candidate 293/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == add(sub(zero, y₀), y₀)) cex
19:25:09 round 1 candidate 294/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(zero, x₁), succ(y₁))) cex
19:25:09 round 1 candidate 295/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == count(sub(y₀, x₀), remove(zero, y₁))) cex
19:25:09 round 1 candidate 296/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(add(y₀, zero), remove(x₀, y₁))) unknown
19:25:09 round 1 candidate 297/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(sub(y₁, x₀), add(y₀, x₀))) cex
19:25:09 round 1 candidate 298/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(x₁, succ(y₀))) cex
19:25:09 round 1 candidate 299/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(sub(y₀, y₀), sub(x₀, y₁))) cex
19:25:09 round 1 candidate 300/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(add(y₁, x₀), sub(y₀, y₁))) cex
19:25:09 round 1 candidate 301/32916 forall y₀: nat, y₁: list :: (succ(length(y₁)) == add(count(zero, y₁), add(y₀, y₀))) cex
19:25:09 round 1 candidate 302/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(add(y₀, y₀), add(y₁, y₁))) cex
19:25:09 round 1 candidate 303/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == add(x₀, zero)) unknown
19:25:09 round 1 candidate 304/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(sub(x₀, x₀), succ(zero))) cex
19:25:09 round 1 candidate 305/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == length(remove(x₀, y₁))) unknown
19:25:09 round 1 candidate 306/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(sub(zero, x₀), sub(x₀, y₀))) cex
19:25:09 round 1 candidate 307/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == cons(length(x₁), cons(y₁, nil))) cex
19:25:09 round 1 candidate 308/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(succ(y₁), add(x₀, zero))) cex
19:25:09 round 1 candidate 309/32916 forall y₀: nat, x₁: list :: (remove(succ(y₀), x₁) == remove(zero, cons(y₀, x₁))) unknown
19:25:10 round 1 candidate 310/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == add(count(x₀, y₁), zero)) unknown
19:25:10 round 1 candidate 311/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == count(zero, cons(zero, nil))) unknown
19:25:10 round 1 candidate 312/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == count(succ(x₀), cons(y₀, nil))) unknown
19:25:10 round 1 candidate 313/32916 forall y₀: nat, x₁: list :: ((succ(y₀) == count(y₀, x₁)) && (x₁ == cons(y₀, nil))) cex
19:25:10 round 1 candidate 314/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(add(y₀, y₁), add(y₀, y₁))) cex
19:25:10 round 1 candidate 315/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == add(add(y₀, x₀), sub(y₀, x₀))) cex
19:25:10 round 1 candidate 316/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(add(y₁, zero), add(y₀, y₁))) cex
19:25:10 round 1 candidate 317/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(succ(y₁), x₀)) cex
19:25:10 round 1 candidate 318/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == cons(add(y₁, y₀), cons(y₁, nil))) cex
19:25:10 round 1 candidate 319/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == add(add(y₀, y₀), succ(x₁))) cex
19:25:10 round 1 candidate 320/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(y₀, sub(zero, x₁))) cex
19:25:10 round 1 candidate 321/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(add(y₀, x₀), sub(x₀, y₁))) cex
19:25:10 round 1 candidate 322/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(x₀, add(x₀, zero))) cex
19:25:10 round 1 candidate 323/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(sub(y₁, y₀), add(y₁, y₀))) cex
19:25:10 round 1 candidate 324/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(x₁, add(y₁, x₁))) cex
19:25:10 round 1 candidate 325/32916 forall y₀: nat, y₁: list :: (succ(length(y₁)) == sub(add(y₀, y₀), length(y₁))) cex
19:25:10 round 1 candidate 326/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == length(remove(x₁, y₁))) cex
19:25:10 round 1 candidate 327/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(x₁, add(y₀, y₁))) cex
19:25:10 round 1 candidate 328/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(y₁, sub(y₀, y₀))) cex
19:25:10 round 1 candidate 329/32916 forall y₀: nat, y₁: list, x₁: list :: (count(count(y₀, y₁), x₁) == add(y₀, add(y₀, zero))) cex
19:25:10 round 1 candidate 330/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(sub(y₀, y₁), add(y₀, y₁))) cex
19:25:10 round 1 candidate 331/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == sub(sub(y₀, y₁), succ(zero))) cex
19:25:10 round 1 candidate 332/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(sub(y₀, y₀), succ(zero))) cex
19:25:10 round 1 candidate 333/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, zero), sub(zero, y₁))) cex
19:25:10 round 1 candidate 334/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == add(sub(x₁, x₁), add(y₀, y₀))) cex
19:25:10 round 1 candidate 335/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == sub(length(y₁), count(x₀, y₁))) cex
19:25:10 round 1 candidate 336/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₁, x₀), succ(x₀))) cex
19:25:10 round 1 candidate 337/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(sub(x₀, x₀), cons(y₀, nil))) unknown
19:25:11 round 1 candidate 338/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(sub(zero, y₁), sub(x₁, y₁))) cex
19:25:11 round 1 candidate 339/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(sub(x₁, x₁), succ(y₁))) cex
19:25:11 round 1 candidate 340/32916 forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == sub(succ(zero), add(x₁, zero))) cex
19:25:11 round 1 candidate 341/32916 forall x₀: nat, y₀: nat, y₁: list :: (cons(x₀, cons(y₀, y₁)) == remove(add(x₀, x₀), remove(y₀, y₁))) cex
19:25:11 round 1 candidate 342/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == count(add(y₀, x₀), cons(x₀, y₁))) unknown
19:25:11 round 1 candidate 343/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, remove(y₀, y₁)) <==> contains(add(y₀, x₀), y₁)) unknown
19:25:11 round 1 candidate 344/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == sub(y₁, length(x₁))) cex
19:25:11 round 1 candidate 345/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == sub(sub(x₀, y₀), sub(y₀, x₀))) cex
19:25:11 round 1 candidate 346/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == add(add(y₀, y₁), sub(y₁, y₀))) cex
19:25:11 round 1 candidate 347/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(sub(zero, x₀), succ(x₀))) cex
19:25:11 round 1 candidate 348/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(sub(x₀, y₀), add(y₁, zero))) cex
19:25:11 round 1 candidate 349/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(add(y₀, y₀), succ(x₀))) cex
19:25:11 round 1 candidate 350/32916 forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == sub(count(x₁, y₀), succ(x₁))) cex
19:25:11 round 1 candidate 351/32916 forall y₀: nat, y₁: list, x₁: list :: (cons(count(y₀, y₁), x₁) == remove(length(y₁), remove(zero, y₁))) cex
19:25:11 round 1 candidate 352/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == count(y₁, x₁)) unknown
19:25:11 round 1 candidate 353/32916 forall y₀: list, x₁: list :: (remove(length(y₀), x₁) == remove(count(zero, y₀), y₀)) unknown
19:25:11 round 1 candidate 354/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(sub(y₀, y₁), y₀)) cex
19:25:11 round 1 candidate 355/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == succ(y₀)) cex
19:25:11 round 1 candidate 356/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == sub(zero, x₁)) cex
19:25:11 round 1 candidate 357/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == count(sub(y₀, x₁), cons(y₀, y₁))) unknown
19:25:12 round 1 candidate 358/32916 forall y₀: nat, x₁: nat :: (succ(add(y₀, x₁)) == add(sub(x₁, y₀), succ(zero))) cex
19:25:12 round 1 candidate 359/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == add(y₀, count(x₁, y₁))) cex
19:25:12 round 1 candidate 360/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == add(add(y₁, y₀), succ(y₁))) cex
19:25:12 round 1 candidate 361/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(sub(zero, y₁), add(y₁, x₁))) cex
19:25:12 round 1 candidate 362/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == count(succ(zero), remove(y₀, y₁))) unknown
19:25:12 round 1 candidate 363/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == add(y₀, succ(x₁))) cex
19:25:12 round 1 candidate 364/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, y₀), succ(x₀))) cex
19:25:12 round 1 candidate 365/32916 forall y₀: nat, y₁: list :: (length(remove(y₀, y₁)) == sub(count(y₀, y₁), y₀)) unknown
19:25:12 round 1 candidate 366/32916 forall y₀: nat, y₁: list, x₁: list :: (count(count(y₀, y₁), x₁) == add(count(y₀, y₁), count(zero, y₁))) unknown
19:25:12 round 1 candidate 367/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(y₀, y₀), zero)) cex
19:25:12 round 1 candidate 368/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == sub(sub(x₀, x₀), count(y₀, y₁))) cex
19:25:12 round 1 candidate 369/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(sub(y₀, y₁), x₁) == cons(length(x₁), remove(zero, x₁))) cex
19:25:12 round 1 candidate 370/32916 forall x₀: nat, y₀: nat :: (sub(x₀, succ(y₀)) == add(sub(zero, x₀), succ(zero))) cex
19:25:12 round 1 candidate 371/32916 forall y₀: nat, y₁: nat, x₁: list :: (contains(add(y₀, y₁), x₁) <==> contains(length(x₁), cons(y₀, nil))) unknown
19:25:12 round 1 candidate 372/32916 forall x₀: nat, y₀: list :: (add(x₀, length(y₀)) == add(add(x₀, zero), succ(x₀))) cex
19:25:12 round 1 candidate 373/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == add(sub(y₀, x₀), sub(y₁, y₀))) cex
19:25:12 round 1 candidate 374/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == add(length(y₁), x₁)) unknown
19:25:13 round 1 candidate 375/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == count(add(y₀, y₀), cons(zero, y₁))) unknown
19:25:13 round 1 candidate 376/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == sub(add(x₁, y₀), sub(y₀, x₁))) cex
19:25:13 round 1 candidate 377/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == add(count(zero, y₁), count(y₀, y₁))) unknown
19:25:13 round 1 candidate 378/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, cons(y₀, y₁)) == remove(succ(x₀), remove(zero, y₁))) unknown
19:25:13 round 1 candidate 379/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(sub(y₀, y₁), x₁) == count(sub(y₁, y₀), cons(zero, x₁))) unknown
19:25:14 round 1 candidate 380/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == succ(length(x₁))) cex
19:25:14 round 1 candidate 381/32916 forall y₀: nat, y₁: nat, x₁: list :: (contains(add(y₀, y₁), x₁) <==> contains(sub(zero, y₁), remove(y₁, x₁))) unknown
19:25:14 round 1 candidate 382/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == sub(add(y₀, y₀), sub(zero, y₁))) cex
19:25:14 round 1 candidate 383/32916 forall x₀: nat, y₀: nat, y₁: list :: (sub(x₀, count(y₀, y₁)) == add(count(zero, y₁), x₀)) unknown
19:25:14 round 1 candidate 384/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == add(add(x₀, zero), sub(y₁, y₀))) cex
19:25:14 round 1 candidate 385/32916 forall y₀: nat, y₁: list, x₁: nat :: (sub(count(y₀, y₁), x₁) == add(add(y₀, x₁), count(zero, y₁))) cex
19:25:14 round 1 candidate 386/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == add(add(x₀, zero), succ(zero))) cex
19:25:14 round 1 candidate 387/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(add(x₀, y₀), sub(y₁, y₀))) cex
19:25:14 round 1 candidate 388/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == sub(sub(x₀, x₀), sub(zero, y₀))) cex
19:25:14 round 1 candidate 389/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == sub(add(y₀, y₁), succ(zero))) cex
19:25:14 round 1 candidate 390/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == sub(add(y₁, x₁), sub(y₀, y₀))) cex
19:25:14 round 1 candidate 391/32916 forall y₀: nat, y₁: nat, x₁: list :: (contains(sub(y₀, y₁), x₁) <==> contains(sub(zero, y₀), cons(zero, x₁))) unknown
19:25:14 round 1 candidate 392/32916 forall y₀: nat, y₁: list, x₁: nat :: (add(count(y₀, y₁), x₁) == count(succ(x₁), cons(zero, nil))) unknown
19:25:14 round 1 candidate 393/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == sub(add(x₀, y₁), sub(zero, y₁))) cex
19:25:14 round 1 candidate 394/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == add(add(x₀, x₀), succ(zero))) cex
19:25:14 round 1 candidate 395/32916 forall x₀: nat, y₀: nat, y₁: list :: ((x₀ == succ(zero)) && (cons(y₀, y₁) == remove(y₀, y₁))) cex
19:25:14 round 1 candidate 396/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == add(x₁, sub(x₁, y₁))) cex
19:25:14 round 1 candidate 397/32916 forall y₀: list, x₁: nat :: (sub(length(y₀), x₁) == sub(succ(zero), add(x₁, x₁))) cex
19:25:14 round 1 candidate 398/32916 forall y₀: nat, x₁: nat :: (add(y₀, x₁) == add(y₀, sub(y₀, x₁))) cex
19:25:14 round 1 candidate 399/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, cons(y₀, y₁)) == count(succ(zero), cons(x₀, y₁))) unknown
19:25:15 round 1 candidate 400/32916 forall y₀: nat, y₁: list, x₁: list :: (count(count(y₀, y₁), x₁) == sub(add(y₀, zero), length(y₁))) cex
19:25:15 round 1 candidate 401/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(add(y₀, x₀), cons(x₀, nil))) unknown
19:25:15 round 1 candidate 402/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == sub(sub(y₀, y₁), sub(zero, y₁))) cex
19:25:15 round 1 candidate 403/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, cons(y₀, y₁)) == remove(sub(x₀, y₀), remove(zero, y₁))) unknown
19:25:15 round 1 candidate 404/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == sub(sub(zero, y₀), succ(y₀))) cex
19:25:15 round 1 candidate 405/32916 forall y₀: nat, y₁: nat, x₁: list :: (count(add(y₀, y₁), x₁) == add(sub(zero, y₁), sub(zero, y₀))) unknown
19:25:15 round 1 candidate 406/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == add(y₁, add(y₁, y₀))) cex
19:25:15 round 1 candidate 407/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == add(x₁, sub(zero, x₁))) cex
19:25:15 round 1 candidate 408/32916 forall x₀: nat, y₀: nat, y₁: list :: (remove(x₀, remove(y₀, y₁)) == cons(sub(zero, y₀), cons(zero, nil))) cex
19:25:15 round 1 candidate 409/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, sub(y₀, y₁)) == sub(add(y₀, y₁), sub(y₁, y₀))) cex
19:25:15 round 1 candidate 410/32916 forall y₀: nat, x₁: list :: (count(succ(y₀), x₁) == add(count(y₀, x₁), zero)) unknown
19:25:16 round 1 candidate 411/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(add(x₀, zero), add(y₁, x₀))) cex
19:25:16 round 1 candidate 412/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(sub(y₀, y₁), x₁) == sub(sub(y₀, x₁), x₁)) cex
19:25:16 round 1 candidate 413/32916 forall x₀: nat, y₀: nat, y₁: list :: (count(x₀, remove(y₀, y₁)) == add(count(y₀, y₁), x₀)) cex
19:25:16 round 1 candidate 414/32916 forall x₀: nat, y₀: nat :: (add(x₀, succ(y₀)) == sub(sub(y₀, y₀), add(x₀, zero))) cex
19:25:16 round 1 candidate 415/32916 forall y₀: nat, y₁: list, x₁: list :: (contains(count(y₀, y₁), x₁) <==> contains(y₀, cons(y₀, nil))) unknown
19:25:16 round 1 candidate 416/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == cons(add(y₁, y₁), x₁)) cex
19:25:16 round 1 candidate 417/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == add(sub(x₀, y₀), sub(y₀, x₀))) cex
19:25:16 round 1 candidate 418/32916 forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(sub(y₁, y₁), add(y₀, zero))) cex
19:25:16 round 1 candidate 419/32916 forall x₀: nat, y₀: nat, y₁: list :: (contains(x₀, cons(y₀, y₁)) <==> contains(count(zero, y₁), cons(zero, y₁))) unknown
19:25:16 round 1 candidate 420/32916 forall y₀: nat, y₁: list, x₁: list :: (cons(count(y₀, y₁), x₁) == remove(count(y₀, x₁), remove(zero, x₁))) cex
19:25:16 round 1 candidate 421/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(sub(y₀, y₁), x₁) == count(zero, cons(x₁, nil))) unknown
19:25:16 round 1 candidate 422/32916 forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(sub(y₁, y₁), x₁)) cex
19:25:16 round 1 candidate 423/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(add(y₁, y₁), sub(zero, x₀))) cex
19:25:16 round 1 candidate 424/32916 forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(sub(x₀, y₁), sub(zero, y₁))) cex
19:25:16 round 1 candidate 425/32916 forall y₀: nat, y₁: nat, x₁: list :: (remove(add(y₀, y₁), x₁) == cons(add(y₁, zero), nil)) cex
19:25:16 round 1 candidate 426/32916 forall y₀: nat, y₁: list :: (length(remove(y₀, y₁)) == count(count(y₀, y₁), cons(zero, y₁))) unknown
19:25:16 round 1 candidate 427/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == sub(add(y₁, y₁), add(x₀, zero))) cex
19:25:16 round 1 candidate 428/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, sub(y₀, y₁)) == count(succ(x₀), cons(zero, nil))) unknown
19:25:17 round 1 candidate 429/32916 forall x₀: nat, y₀: nat, y₁: nat :: (sub(x₀, add(y₀, y₁)) == add(add(y₀, y₀), sub(y₁, y₁))) cex
19:25:17 round 1 candidate 430/32916 forall x₀: nat, y₀: nat, y₁: list :: (add(x₀, count(y₀, y₁)) == add(add(y₀, y₀), succ(x₀))) cex
19:25:17 round 1 candidate 431/32916 forall y₀: nat, y₁: nat, x₁: nat :: (sub(add(y₀, y₁), x₁) == count(add(y₀, x₁), cons(y₀, nil))) unknown
19:25:17 round 1 candidate 432/32916 forall x₀: nat, y₀: list :: (add(x₀, length(y₀)) == add(count(x₀, y₀), add(x₀, zero))) unknown
19:25:17 round 1 candidate 433/32916 forall y₀: nat, y₁: list, x₁: list :: (remove(count(y₀, y₁), x₁) == cons(count(y₀, y₁), nil)) cex
19:25:17 round 1 candidate 434/32916 forall x₀: nat, y₀: nat, y₁: list :: (cons(x₀, remove(y₀, y₁)) == remove(count(y₀, y₁), remove(x₀, y₁))) cex
