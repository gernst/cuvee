(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun not_ (Bool) Bool)
(=> rule1 (not_ false) true)
(=> rule2 (not_ true) false)
(declare-fun length (list) nat)
(=> rule3 (length nil) zero)
(=> rule4 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun filter ((-> nat Bool) list) list)
(=> rule5 (filter ?p nil) nil)
(=> rule6 (filter ?p (cons ?y ?ys)) (ite (select ?p ?y) (cons ?y (filter ?p ?ys)) (filter ?p ?ys)))
(=> rule7 (ite (select ?p ?y) (cons ?y (filter ?p ?ys)) (filter ?p ?ys)) (filter ?p (cons ?y ?ys)))
(declare-fun all ((-> nat Bool) list) Bool)
(=> rule8 (all ?p nil) true)
(=> rule9 (all ?p (cons ?y ?ys)) (and (select ?p ?y) (all ?p ?ys)))
(=> rule10 (and (select ?p ?y) (all ?p ?ys)) (all ?p (cons ?y ?ys)))
(declare-fun ex ((-> nat Bool) list) Bool)
(=> rule11 (ex ?p nil) false)
(=> rule12 (ex ?p (cons ?y ?ys)) (or (select ?p ?y) (ex ?p ?ys)))
(=> rule13 (or (select ?p ?y) (ex ?p ?ys)) (ex ?p (cons ?y ?ys)))
(declare-fun countif ((-> nat Bool) list) nat)
(=> rule14 (countif ?p nil) zero)
(=> rule15 (countif ?p (cons ?y ?ys)) (ite (select ?p ?y) (succ (countif ?p ?ys)) (countif ?p ?ys)))
(=> rule16 (ite (select ?p ?y) (succ (countif ?p ?ys)) (countif ?p ?ys)) (countif ?p (cons ?y ?ys)))
