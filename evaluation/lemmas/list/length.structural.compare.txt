evaluation/lemmas/list/length.structural.bpl
  4  number of lemmas
  0  wrong
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  4  nontrivial
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  4  reduced greedily
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  3  independent
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  0  evaluation/lemmas/list/length.conditional.bpl
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  0  evaluation/lemmas/list/length.enumerate.bpl
forall y₀: list, y₁: nat, x₁: nat :: (add(nlength(y₀, y₁), x₁) == nlength(y₀, add(y₁, x₁)))
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: list, x₁: nat :: (add(length(y₀), x₁) == nlength(y₀, x₁))
forall x: nat :: (add(x, zero) == x)
  4  evaluation/lemmas/list/length.th.log
