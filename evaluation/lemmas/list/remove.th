(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun not_ (Bool) Bool)
(=> rule1 (not_ false) true)
(=> rule2 (not_ true) false)
(declare-fun add (nat nat) nat)
(=> rule3 (add zero ?n) ?n)
(=> rule4 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule5 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun sub (nat nat) nat)
(=> rule6 (sub ?m zero) ?m)
(=> rule7 (sub zero (succ ?n)) zero)
(=> rule8 (sub (succ ?m) (succ ?n)) (sub ?m ?n))
(=> rule9 (sub ?m ?n) (sub (succ ?m) (succ ?n)))
(declare-fun length (list) nat)
(=> rule10 (length nil) zero)
(=> rule11 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun contains (nat list) Bool)
(=> rule12 (contains ?x nil) false)
(=> rule13 (contains ?x (cons ?y ?ys)) (or (= ?x ?y) (contains ?x ?ys)))
(=> rule14 (or (= ?x ?y) (contains ?x ?ys)) (contains ?x (cons ?y ?ys)))
(declare-fun remove (nat list) list)
(=> rule15 (remove ?x nil) nil)
(=> rule16 (remove ?x (cons ?y ?ys)) (ite (= ?x ?y) (remove ?x ?ys) (cons ?y (remove ?x ?ys))))
(=> rule17 (ite (= ?x ?y) (remove ?x ?ys) (cons ?y (remove ?x ?ys))) (remove ?x (cons ?y ?ys)))
(declare-fun count (nat list) nat)
(=> rule18 (count ?x nil) zero)
(=> rule19 (count ?x (cons ?y ?ys)) (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)))
(=> rule20 (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)) (count ?x (cons ?y ?ys)))
