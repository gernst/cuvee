evaluation/lemmas/list/remove.th.log
  26  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  21  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  13  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == sub(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == sub(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == ?ts_ph_nat_1)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == zero)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(succ(?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(succ(zero), ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == sub(succ(zero), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)) == sub(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_1, ?ts_ph_nat_0) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_1), add(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_1) == sub(add(?ts_ph_nat_0, ?ts_ph_nat_0), add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (contains(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) <==> false)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (count(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == zero)
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)) == remove(?ts_ph_nat_1, ?ts_ph_list_0))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (remove(?ts_ph_nat_1, ?ts_ph_list_0) == remove(?ts_ph_nat_1, remove(?ts_ph_nat_1, ?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (sub(succ(zero), ?ts_ph_nat_0) == count(zero, cons(?ts_ph_nat_0, nil)))
forall ?ts_ph_nat_0: nat :: (count(zero, cons(?ts_ph_nat_0, nil)) == sub(succ(zero), ?ts_ph_nat_0))
  18  evaluation/lemmas/list/remove.enumerate.bpl
