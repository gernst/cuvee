(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun leq (nat nat) Bool)
(=> rule1 (leq zero ?n) true)
(=> rule2 (leq (succ ?m) zero) false)
(=> rule3 (leq (succ ?m) (succ ?n)) (leq ?m ?n))
(=> rule4 (leq ?m ?n) (leq (succ ?m) (succ ?n)))
(declare-fun add (nat nat) nat)
(=> rule5 (add zero ?n) ?n)
(=> rule6 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule7 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun append (list list) list)
(=> rule8 (append nil ?ys) ?ys)
(=> rule9 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule10 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun length (list) nat)
(=> rule11 (length nil) zero)
(=> rule12 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun reverse (list) list)
(=> rule13 (reverse nil) nil)
(=> rule14 (reverse (cons ?y ?ys)) (append (reverse ?ys) (cons ?y nil)))
(=> rule15 (append (reverse ?ys) (cons ?y nil)) (reverse (cons ?y ?ys)))
(declare-fun rotate (nat list) list)
(=> rule16 (rotate ?n nil) nil)
(=> rule17 (rotate zero (cons ?y ?ys)) (cons ?y ?ys))
(=> rule18 (cons ?y ?ys) (rotate zero (cons ?y ?ys)))
(=> rule19 (rotate (succ ?n) (cons ?y ?ys)) (append (rotate ?n ?ys) (cons ?y nil)))
(=> rule20 (append (rotate ?n ?ys) (cons ?y nil)) (rotate (succ ?n) (cons ?y ?ys)))
