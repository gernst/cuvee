evaluation/lemmas/list/reverse.th.log
  24  number of lemmas
  0  wrong
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  24  nontrivial
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  13  reduced greedily
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.structural.bpl
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.conditional.bpl
forall ?ts_ph_list_0: list :: (nreverse(?ts_ph_list_0, nil) == reverse(?ts_ph_list_0))
forall ?ts_ph_list_0: list :: (reverse(?ts_ph_list_0) == nreverse(?ts_ph_list_0, nil))
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (reverse(append(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, reverse(?ts_ph_list_1)) == reverse(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == cons(?ts_ph_nat_1, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)) == append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (append(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == append(?ts_ph_list_0, append(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)) == nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_list_2: list :: (nreverse(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_list_2) == nreverse(?ts_ph_list_0, nreverse(?ts_ph_list_1, ?ts_ph_list_2)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil) == qreverse(?ts_ph_list_1, ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (qreverse(?ts_ph_list_1, ?ts_ph_list_0) == qreverse(qreverse(?ts_ph_list_0, ?ts_ph_list_1), nil))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)) == append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, nreverse(?ts_ph_list_0, ?ts_ph_list_1)) == nreverse(?ts_ph_list_0, append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)) == cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))))
forall ?ts_ph_nat_1: nat, ?ts_ph_list_0: list :: (cons(?ts_ph_nat_1, append(?ts_ph_list_0, reverse(?ts_ph_list_0))) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), cons(?ts_ph_nat_1, nil)))
forall ?ts_ph_list_0: list :: (nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (append(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)) == nreverse(nreverse(?ts_ph_list_0, ?ts_ph_list_0), nreverse(?ts_ph_list_0, ?ts_ph_list_0)))
forall ?ts_ph_list_0: list :: (reverse(reverse(?ts_ph_list_0)) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (qreverse(?ts_ph_list_0, ?ts_ph_list_1) == append(reverse(?ts_ph_list_0), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(reverse(?ts_ph_list_0), ?ts_ph_list_1) == qreverse(?ts_ph_list_0, ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, ?ts_ph_list_1) == nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0))
forall ?ts_ph_list_1: list, ?ts_ph_list_0: list :: (nreverse(reverse(?ts_ph_list_1), ?ts_ph_list_0) == append(?ts_ph_list_0, ?ts_ph_list_1))
  0  evaluation/lemmas/list/reverse.enumerate.bpl
