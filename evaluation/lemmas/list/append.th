(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(declare-fun add (nat nat) nat)
(=> rule1 (add zero ?n) ?n)
(=> rule2 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule3 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun snoc (list nat) list)
(=> rule4 (snoc nil ?z) (cons ?z nil))
(=> rule5 (cons ?z nil) (snoc nil ?z))
(=> rule6 (snoc (cons ?y ?ys) ?z) (cons ?y (snoc ?ys ?z)))
(=> rule7 (cons ?y (snoc ?ys ?z)) (snoc (cons ?y ?ys) ?z))
(declare-fun append (list list) list)
(=> rule8 (append nil ?ys) ?ys)
(=> rule9 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule10 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(declare-fun length (list) nat)
(=> rule11 (length nil) zero)
(=> rule12 (length (cons ?x ?xs)) (succ (length ?xs)))
(declare-fun count (nat list) nat)
(=> rule13 (count ?x nil) zero)
(=> rule14 (count ?x (cons ?y ?ys)) (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)))
(=> rule15 (ite (= ?x ?y) (succ (count ?x ?ys)) (count ?x ?ys)) (count ?x (cons ?y ?ys)))
