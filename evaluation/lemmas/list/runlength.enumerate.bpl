data nat = zero | succ(pred: nat);
data list = nil | cons(head: nat, tail: list);
function add(x₀: nat, x₁: nat): nat;
axiom forall n: nat :: (add(zero, n) == n);
axiom forall m: nat, n: nat :: (add(succ(m), n) == succ(add(m, n)));
function mul(x₀: nat, x₁: nat): nat;
axiom forall n: nat :: (mul(zero, n) == zero);
axiom forall m: nat, n: nat :: (mul(succ(m), n) == add(n, mul(m, n)));
function append(x₀: list, x₁: list): list;
axiom forall ys: list :: (append(nil, ys) == ys);
axiom forall x: nat, xs: list, ys: list :: (append(cons(x, xs), ys) == cons(x, append(xs, ys)));
function sum(x₀: list): nat;
axiom (sum(nil) == zero);
axiom forall n: nat, xs: list :: (sum(cons(n, xs)) == add(n, sum(xs)));
function is_runs(x₀: list, x₁: list): Bool;
axiom (is_runs(nil, nil) <==> true);
axiom forall n: nat, ind: list, x: nat, val: list :: (is_runs(cons(n, ind), cons(x, val)) <==> is_runs(ind, val));
axiom forall n: nat, ind: list :: (is_runs(cons(n, ind), nil) <==> false);
axiom forall ind: list, x: nat, val: list :: (is_runs(nil, cons(x, val)) <==> false);
function sumruns(x₀: list, x₁: list): nat;
axiom (sumruns(nil, nil) == zero);
axiom forall n: nat, ind: list, x: nat, val: list :: (sumruns(cons(n, ind), cons(x, val)) == add(mul(n, x), sumruns(ind, val)));
axiom forall n: nat, ind: list :: (sumruns(cons(n, ind), nil) == zero);
axiom forall ind: list, x: nat, val: list :: (sumruns(nil, cons(x, val)) == zero);
function decode(x₀: list, x₁: list): list;
axiom (decode(nil, nil) == nil);
axiom forall ind: list, x: nat, val: list :: (decode(cons(zero, ind), cons(x, val)) == decode(ind, val));
axiom forall n: nat, ind: list, x: nat, val: list :: (decode(cons(succ(n), ind), cons(x, val)) == cons(x, decode(cons(n, ind), cons(x, val))));
axiom forall n: nat, ind: list, x: nat, val: list :: (decode(cons(n, ind), nil) == nil);
axiom forall n: nat, ind: list, x: nat, val: list :: (decode(nil, cons(x, val)) == nil);
lemma forall y₀: nat, y₁: nat :: (succ(add(y₀, y₁)) == add(y₀, succ(y₁)));
lemma forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(sumruns(y₀, y₁), add(x₁, zero)));
lemma forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₁, y₀), add(x₁, zero)));
lemma forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₀, add(y₁, x₀)));
lemma forall x₀: nat, y₀: nat, y₁: nat :: (add(x₀, add(y₀, y₁)) == add(y₁, add(y₀, x₀)));
lemma forall y₀: list, y₁: list, x₁: nat :: (add(sumruns(y₀, y₁), x₁) == add(x₁, sumruns(y₀, y₁)));
lemma forall x₀: list, y₀: list, y₁: list :: (append(x₀, append(y₀, y₁)) == append(append(x₀, y₀), y₁));
lemma forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(add(y₀, x₁), y₁));
lemma forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(x₁, add(y₁, y₀)));
lemma forall y₀: nat, y₁: nat :: (add(y₀, y₁) == add(y₁, y₀));
lemma forall y₀: list, y₁: list, x₁: list :: (append(decode(y₀, y₁), x₁) == append(decode(y₀, y₁), append(x₁, nil)));
lemma forall x₀: nat, y₀: nat, y₁: nat :: (mul(x₀, add(y₀, y₁)) == add(mul(x₀, y₁), mul(x₀, y₀)));
lemma forall y₀: list, y₁: list :: (sum(append(y₀, y₁)) == add(sum(y₁), sum(y₀)));
lemma forall x₀: nat, y₀: nat :: (mul(x₀, succ(y₀)) == add(mul(x₀, y₀), x₀));
