evaluation/lemmas/list/remove.structural.bpl
  3  number of lemmas
  0  wrong
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  2  nontrivial
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  2  reduced greedily
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  2  independent
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  0  evaluation/lemmas/list/remove.conditional.bpl
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  0  evaluation/lemmas/list/remove.enumerate.bpl
forall y₀: nat, y₁: nat, x₁: nat :: (add(add(y₀, y₁), x₁) == add(y₀, add(y₁, x₁)))
forall y₀: Bool :: (not_(not_(y₀)) <==> y₀)
forall x: nat :: (add(x, zero) == x)
  0  evaluation/lemmas/list/remove.th.log
