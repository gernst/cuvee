data nat = zero | succ(pred: nat);
data list = nil | cons(head: list, tail: list);
function append(x₀: list, x₁: list): list;
axiom forall ys: list :: (append(nil, ys) == ys);
axiom forall x: nat, xs: list, ys: list :: (append(cons(x, xs), ys) == cons(x, append(xs, ys)));
function reverse(x₀: list): list;
axiom (reverse(nil) == nil);
axiom forall y: nat, ys: list :: (reverse(cons(y, ys)) == append(reverse(ys), cons(y, nil)));
function qreverse(x₀: list, x₁: list): list;
axiom forall zs: list :: (qreverse(nil, zs) == zs);
axiom forall zs: list, y: nat, ys: list :: (qreverse(cons(y, ys), zs) == qreverse(ys, cons(y, zs)));
function nreverse(x₀: list, x₁: list): list;
axiom forall zs: list :: (nreverse(nil, zs) == zs);
axiom forall zs: list, y: nat, ys: list :: (nreverse(cons(y, ys), zs) == append(nreverse(ys, zs), cons(y, nil)));
lemma forall y₀: list :: (reverse(reverse(y₀)) == y₀);
lemma forall y₀: list, x₁: list :: (append(reverse(y₀), x₁) == qreverse(y₀, x₁));
lemma forall y₀: list, y₁: list :: (reverse(append(y₀, y₁)) == qreverse(y₁, reverse(y₀)));
lemma forall y₀: list, y₁: list :: (reverse(qreverse(y₀, y₁)) == qreverse(y₁, y₀));
lemma forall y₀: list, y₁: list, x₁: list :: (nreverse(append(y₀, y₁), x₁) == append(x₁, qreverse(y₁, reverse(y₀))));
lemma forall y₀: list, y₁: list, x₁: list :: (nreverse(qreverse(y₀, y₁), x₁) == append(x₁, qreverse(y₁, y₀)));
lemma forall x₀: list, x₁: list :: (nreverse(x₀, x₁) == append(x₁, reverse(x₀)));
lemma forall y₀: list, y₁: list, x₁: list :: (append(append(y₀, y₁), x₁) == append(y₀, append(y₁, x₁)));
lemma forall y₀: list, y₁: list, x₁: list :: (append(qreverse(y₀, y₁), x₁) == qreverse(y₀, append(y₁, x₁)));
lemma forall x: list :: (append(x, nil) == x);
