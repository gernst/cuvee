evaluation/lemmas/list/append.th.log
  17  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  17  nontrivial
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  reduced greedily
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  evaluation/lemmas/list/append.structural.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  9  evaluation/lemmas/list/append.conditional.bpl
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_list_0: list :: (append(?ts_ph_list_0, nil) == ?ts_ph_list_0)
forall ?ts_ph_list_0: list, ?ts_ph_nat_0: nat :: (length(snoc(?ts_ph_list_0, ?ts_ph_nat_0)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)) == append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1))
forall ?ts_ph_list_0: list, ?ts_ph_nat_1: nat, ?ts_ph_list_1: list :: (append(snoc(?ts_ph_list_0, ?ts_ph_nat_1), ?ts_ph_list_1) == append(?ts_ph_list_0, cons(?ts_ph_nat_1, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (length(append(?ts_ph_list_0, ?ts_ph_list_1)) == add(length(?ts_ph_list_0), length(?ts_ph_list_1)))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list :: (add(length(?ts_ph_list_0), length(?ts_ph_list_1)) == length(append(?ts_ph_list_0, ?ts_ph_list_1)))
forall ?ts_ph_list_0: list :: (succ(length(?ts_ph_list_0)) == add(length(?ts_ph_list_0), succ(zero)))
forall ?ts_ph_list_0: list :: (add(length(?ts_ph_list_0), succ(zero)) == succ(length(?ts_ph_list_0)))
forall ?ts_ph_nat_0: nat :: (succ(succ(?ts_ph_nat_0)) == add(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (add(succ(?ts_ph_nat_0), succ(zero)) == succ(succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_1: nat, ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_1, ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == add(?ts_ph_nat_1, ?ts_ph_nat_0))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)) == snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1))
forall ?ts_ph_list_0: list, ?ts_ph_list_1: list, ?ts_ph_nat_1: nat :: (snoc(append(?ts_ph_list_0, ?ts_ph_list_1), ?ts_ph_nat_1) == append(?ts_ph_list_0, snoc(?ts_ph_list_1, ?ts_ph_nat_1)))
  0  evaluation/lemmas/list/append.enumerate.bpl
