(datatype nat () ((zero nat) (succ nat nat)))
(datatype list () ((nil list) (cons nat list list)))
(datatype tree () ((leaf tree) (node nat tree tree tree)))
(declare-fun add (nat nat) nat)
(declare-fun length (list) nat)
(declare-fun map ((-> nat nat) list) list)
(declare-fun append (list list) list)
(declare-fun contains (nat list) Bool)
(declare-fun size (tree) nat)
(declare-fun elems (tree) list)
(declare-fun mirror (tree) tree)
(declare-fun maptree ((-> nat nat) tree) tree)
(declare-fun containstree (nat tree) Bool)
(declare-fun insert (nat tree) tree)
(=> rule1 (add zero ?n) ?n)
(=> rule2 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule3 (succ (add ?m ?n)) (add (succ ?m) ?n))
(=> rule4 (length nil) zero)
(=> rule5 (length (cons ?x ?xs)) (succ (length ?xs)))
(=> rule6 (map ?f nil) nil)
(=> rule7 (map ?f (cons ?y ?ys)) (cons (select ?f ?y) (map ?f ?ys)))
(=> rule8 (cons (select ?f ?y) (map ?f ?ys)) (map ?f (cons ?y ?ys)))
(=> rule9 (append nil ?ys) ?ys)
(=> rule10 (append (cons ?x ?xs) ?ys) (cons ?x (append ?xs ?ys)))
(=> rule11 (cons ?x (append ?xs ?ys)) (append (cons ?x ?xs) ?ys))
(=> rule12 (contains ?x nil) false)
(=> rule13 (contains ?x (cons ?y ?ys)) (or (= ?x ?y) (contains ?x ?ys)))
(=> rule14 (or (= ?x ?y) (contains ?x ?ys)) (contains ?x (cons ?y ?ys)))
(=> rule15 (size leaf) zero)
(=> rule16 (size (node ?v ?l ?r)) (succ (add (size ?l) (size ?r))))
(=> rule17 (mirror leaf) leaf)
(=> rule18 (mirror (node ?v ?l ?r)) (node ?v ?r ?l))
(=> rule19 (node ?v ?r ?l) (mirror (node ?v ?l ?r)))
(=> rule20 (maptree ?f leaf) leaf)
(=> rule21 (maptree ?f (node ?v ?l ?r)) (node (select ?f ?v) (maptree ?f ?l) (maptree ?f ?r)))
(=> rule22 (node (select ?f ?v) (maptree ?f ?l) (maptree ?f ?r)) (maptree ?f (node ?v ?l ?r)))
(=> rule23 (elems leaf) nil)
(=> rule24 (elems (node ?v ?l ?r)) (cons ?v (append (elems ?l) (elems ?r))))
(=> rule25 (cons ?v (append (elems ?l) (elems ?r))) (elems (node ?v ?l ?r)))
(=> rule26 (containstree ?x leaf) false)
(=> rule27 (containstree ?x (node ?v ?l ?r)) (or (= ?x ?v) (containstree ?x ?l) (containstree ?x ?r)))
(=> rule28 (or (= ?x ?v) (containstree ?x ?l) (containstree ?x ?r)) (containstree ?x (node ?v ?l ?r)))
(=> rule29 (insert ?x leaf) (node ?x leaf leaf))
(=> rule30 (node ?x leaf leaf) (insert ?x leaf))
(=> rule31 (insert ?x (node ?v ?l ?r)) (node ?v (insert ?x ?l) ?r))
(=> rule32 (node ?v (insert ?x ?l) ?r) (insert ?x (node ?v ?l ?r)))
