evaluation/lemmas/nat.th.log
  59  number of lemmas
  0  wrong
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  49  nontrivial
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  36  reduced greedily
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  47  evaluation/lemmas/nat.structural.bpl
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  37  evaluation/lemmas/nat.conditional.bpl
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, ?ts_ph_nat_0) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_0) <==> true)
forall ?ts_ph_nat_0: nat :: (sub(?ts_ph_nat_0, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (sub(zero, ?ts_ph_nat_0) == zero)
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, zero) == zero)
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, zero) == max(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, zero) == add(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(?ts_ph_nat_0, ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, ?ts_ph_nat_1) <==> lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, succ(?ts_ph_nat_1)) <==> leq(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, succ(?ts_ph_nat_1)) == succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (succ(add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, succ(?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == ?ts_ph_nat_0)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, succ(?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (lt(succ(?ts_ph_nat_0), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat :: (sub(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == succ(zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (lt(zero, ?ts_ph_nat_0) <==> not_(leq(?ts_ph_nat_0, zero)))
forall ?ts_ph_nat_0: nat :: (not_(leq(?ts_ph_nat_0, zero)) <==> lt(zero, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(zero)) == min(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(zero), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(succ(zero), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(zero)) == max(succ(zero), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == max(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (add(?ts_ph_nat_0, succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == add(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2) == add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat, ?ts_ph_nat_2: nat :: (add(?ts_ph_nat_0, add(?ts_ph_nat_1, ?ts_ph_nat_2)) == add(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_2))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (leq(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> true)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) <==> false)
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (add(?ts_ph_nat_0, ?ts_ph_nat_1) == max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (max(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == add(?ts_ph_nat_0, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (lt(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) <==> lt(zero, ?ts_ph_nat_1))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (sub(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == sub(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(add(?ts_ph_nat_0, ?ts_ph_nat_1), ?ts_ph_nat_0) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat, ?ts_ph_nat_1: nat :: (min(?ts_ph_nat_0, add(?ts_ph_nat_0, ?ts_ph_nat_1)) == mul(?ts_ph_nat_0, succ(zero)))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) <==> true)
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (leq(mul(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero) <==> leq(?ts_ph_nat_0, zero))
forall ?ts_ph_nat_0: nat :: (leq(?ts_ph_nat_0, zero) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), zero))
forall ?ts_ph_nat_0: nat :: (mul(?ts_ph_nat_0, ?ts_ph_nat_0) == max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (max(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == mul(?ts_ph_nat_0, ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) <==> not_(lt(zero, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (not_(lt(zero, ?ts_ph_nat_0)) <==> leq(add(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (mul(succ(?ts_ph_nat_0), succ(zero)) == max(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (max(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == mul(succ(?ts_ph_nat_0), succ(zero)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, succ(?ts_ph_nat_0)) == min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(?ts_ph_nat_0, mul(?ts_ph_nat_0, ?ts_ph_nat_0)) == min(?ts_ph_nat_0, succ(?ts_ph_nat_0)))
forall ?ts_ph_nat_0: nat :: (min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0) == min(succ(?ts_ph_nat_0), ?ts_ph_nat_0))
forall ?ts_ph_nat_0: nat :: (min(succ(?ts_ph_nat_0), ?ts_ph_nat_0) == min(mul(?ts_ph_nat_0, ?ts_ph_nat_0), ?ts_ph_nat_0))
  51  evaluation/lemmas/nat.enumerate.bpl
