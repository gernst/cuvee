(datatype nat () ((zero nat) (succ nat nat)))
(declare-fun lt (nat nat) Bool)
(=> rule1 (lt ?m zero) false)
(=> rule2 (lt zero (succ ?n)) true)
(=> rule3 (lt (succ ?m) (succ ?n)) (lt ?m ?n))
(=> rule4 (lt ?m ?n) (lt (succ ?m) (succ ?n)))
(datatype node () ((True node) (False node) (Node nat node node node)))
(declare-fun not_ (Bool) Bool)
(=> rule5 (not_ false) true)
(=> rule6 (not_ true) false)
(declare-fun and_ (Bool Bool) Bool)
(=> rule7 (and_ false ?b) false)
(=> rule8 (and_ true ?b) ?b)
(declare-fun neg (node) node)
(=> rule9 (neg False) True)
(=> rule10 (neg True) False)
(=> rule11 (neg (Node ?x ?l ?r)) (Node ?x (neg ?l) (neg ?r)))
(=> rule12 (Node ?x (neg ?l) (neg ?r)) (neg (Node ?x ?l ?r)))
(declare-fun conj (node node) node)
(=> rule13 (conj True ?n) ?n)
(=> rule14 (conj False ?n) False)
(=> rule15 (conj ?m True) ?m)
(=> rule16 (conj ?m False) False)
(=> rule17 (conj (Node ?mx ?ml ?mr) (Node ?nx ?nl ?nr)) (ite (lt ?mx ?nx) (Node ?mx (conj ?ml (Node ?nx ?nl ?nr)) (conj ?mr (Node ?nx ?nl ?nr))) (ite (lt ?nx ?mx) (Node ?nx (conj (Node ?mx ?ml ?mr) ?nl) (conj (Node ?mx ?ml ?mr) ?nr)) (Node ?mx (conj ?ml ?nl) (conj ?mr ?nr)))))
(=> rule18 (ite (lt ?mx ?nx) (Node ?mx (conj ?ml (Node ?nx ?nl ?nr)) (conj ?mr (Node ?nx ?nl ?nr))) (ite (lt ?nx ?mx) (Node ?nx (conj (Node ?mx ?ml ?mr) ?nl) (conj (Node ?mx ?ml ?mr) ?nr)) (Node ?mx (conj ?ml ?nl) (conj ?mr ?nr)))) (conj (Node ?mx ?ml ?mr) (Node ?nx ?nl ?nr)))
(declare-fun eval (node (-> nat Bool)) Bool)
(=> rule19 (eval False ?v) false)
(=> rule20 (eval True ?v) true)
(=> rule21 (eval (Node ?x ?l ?r) ?v) (ite (select ?v ?x) (eval ?l ?v) (eval ?r ?v)))
(=> rule22 (ite (select ?v ?x) (eval ?l ?v) (eval ?r ?v)) (eval (Node ?x ?l ?r) ?v))
