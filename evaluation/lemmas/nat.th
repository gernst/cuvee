(datatype nat () ((zero nat) (succ nat nat)))
(declare-fun not_ (Bool) Bool)
(=> rule1 (not_ false) true)
(=> rule2 (not_ true) false)
(declare-fun add (nat nat) nat)
(=> rule3 (add zero ?n) ?n)
(=> rule4 (add (succ ?m) ?n) (succ (add ?m ?n)))
(=> rule5 (succ (add ?m ?n)) (add (succ ?m) ?n))
(declare-fun sub (nat nat) nat)
(=> rule6 (sub ?m zero) ?m)
(=> rule7 (sub zero (succ ?n)) zero)
(=> rule8 (sub (succ ?m) (succ ?n)) (sub ?m ?n))
(=> rule9 (sub ?m ?n) (sub (succ ?m) (succ ?n)))
(declare-fun mul (nat nat) nat)
(=> rule10 (mul zero ?n) zero)
(=> rule11 (mul (succ ?m) ?n) (add ?n (mul ?m ?n)))
(=> rule12 (add ?n (mul ?m ?n)) (mul (succ ?m) ?n))
(declare-fun leq (nat nat) Bool)
(=> rule13 (leq zero ?n) true)
(=> rule14 (leq (succ ?m) zero) false)
(=> rule15 (leq (succ ?m) (succ ?n)) (leq ?m ?n))
(=> rule16 (leq ?m ?n) (leq (succ ?m) (succ ?n)))
(declare-fun lt (nat nat) Bool)
(=> rule17 (lt ?m zero) false)
(=> rule18 (lt zero (succ ?n)) true)
(=> rule19 (lt (succ ?m) (succ ?n)) (lt ?m ?n))
(=> rule20 (lt ?m ?n) (lt (succ ?m) (succ ?n)))
(declare-fun min (nat nat) nat)
(=> rule21 (min zero ?n) zero)
(=> rule22 (min (succ ?m) zero) zero)
(=> rule23 (min (succ ?m) (succ ?n)) (succ (min ?m ?n)))
(=> rule24 (succ (min ?m ?n)) (min (succ ?m) (succ ?n)))
(declare-fun max (nat nat) nat)
(=> rule25 (max zero ?n) ?n)
(=> rule26 (max (succ ?m) zero) (succ ?m))
(=> rule27 (succ ?m) (max (succ ?m) zero))
(=> rule28 (max (succ ?m) (succ ?n)) (succ (max ?m ?n)))
(=> rule29 (succ (max ?m ?n)) (max (succ ?m) (succ ?n)))
